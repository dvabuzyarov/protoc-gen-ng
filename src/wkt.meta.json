[
  {
    "name": "google/protobuf/timestamp.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Timestamp",
        "fieldList": [
          {
            "name": "seconds",
            "number": 1,
            "label": 1,
            "type": 3,
            "jsonName": "seconds"
          },
          {
            "name": "nanos",
            "number": 2,
            "label": 1,
            "type": 5,
            "jsonName": "nanos"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "TimestampProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/ptypes/timestamp",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            137,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            35,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            66
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            36,
            0,
            66
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            37,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            38,
            0,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            39,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            40,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            126,
            0,
            137,
            1
          ],
          "leadingComments": " A Timestamp represents a point in time independent of any time zone or local\n calendar, encoded as a count of seconds and fractions of seconds at\n nanosecond resolution. The count is relative to an epoch at UTC midnight on\n January 1, 1970, in the proleptic Gregorian calendar which extends the\n Gregorian calendar backwards to year one.\n\n All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n second table is needed for interpretation, using a [24-hour linear\n smear](https://developers.google.com/time/smear).\n\n The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n restricting to that range, we ensure that we can convert to and from [RFC\n 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n # Examples\n\n Example 1: Compute Timestamp from POSIX `time()`.\n\n     Timestamp timestamp;\n     timestamp.set_seconds(time(NULL));\n     timestamp.set_nanos(0);\n\n Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n\n     Timestamp timestamp;\n     timestamp.set_seconds(tv.tv_sec);\n     timestamp.set_nanos(tv.tv_usec * 1000);\n\n Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n     FILETIME ft;\n     GetSystemTimeAsFileTime(&ft);\n     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n     Timestamp timestamp;\n     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\n Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n     long millis = System.currentTimeMillis();\n\n     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n         .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\n Example 5: Compute Timestamp from current time in Python.\n\n     timestamp = Timestamp()\n     timestamp.GetCurrentTime()\n\n # JSON Mapping\n\n In JSON format, the Timestamp type is encoded as a string in the\n [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n where {year} is always expressed using four digits while {month}, {day},\n {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n is required. A proto3 JSON serializer should always use UTC (as indicated by\n \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n able to accept both UTC and other timezones (as indicated by an offset).\n\n For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n 01:30 UTC on January 15, 2017.\n\n In JavaScript, one can convert a Date object to this format using the\n standard\n [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n method. In Python, a standard `datetime.datetime` object can be converted\n to this format using\n [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n the Joda Time's [`ISODateTimeFormat.dateTime()`](\n http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n ) to obtain a formatter capable of generating timestamps in this format.\n\n\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            126,
            8,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            130,
            2,
            20
          ],
          "leadingComments": " Represents seconds of UTC time since Unix epoch\n 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n 9999-12-31T23:59:59Z inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            130,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            130,
            8,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            130,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1
          ],
          "spanList": [
            136,
            2,
            18
          ],
          "leadingComments": " Non-negative fractions of a second at nanosecond resolution. Negative\n second values with fractions must still have non-negative nanos values\n that count forward in time. Must be from 0 to 999,999,999\n inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            136,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            136,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            136,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/field_mask.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "FieldMask",
        "fieldList": [
          {
            "name": "paths",
            "number": 1,
            "label": 3,
            "type": 9,
            "jsonName": "paths"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "FieldMaskProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "google.golang.org/genproto/protobuf/field_mask;field_mask",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            244,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            35,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            36,
            0,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            37,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            38,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            80
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            39,
            0,
            80
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            40,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            241,
            0,
            244,
            1
          ],
          "leadingComments": " `FieldMask` represents a set of symbolic field paths, for example:\n\n     paths: \"f.a\"\n     paths: \"f.b.d\"\n\n Here `f` represents a field in some root message, `a` and `b`\n fields in the message found in `f`, and `d` a field found in the\n message in `f.b`.\n\n Field masks are used to specify a subset of fields that should be\n returned by a get operation or modified by an update operation.\n Field masks also have a custom JSON encoding (see below).\n\n # Field Masks in Projections\n\n When used in the context of a projection, a response message or\n sub-message is filtered by the API to only contain those fields as\n specified in the mask. For example, if the mask in the previous\n example is applied to a response message as follows:\n\n     f {\n       a : 22\n       b {\n         d : 1\n         x : 2\n       }\n       y : 13\n     }\n     z: 8\n\n The result will not contain specific values for fields x,y and z\n (their value will be set to the default, and omitted in proto text\n output):\n\n\n     f {\n       a : 22\n       b {\n         d : 1\n       }\n     }\n\n A repeated field is not allowed except at the last position of a\n paths string.\n\n If a FieldMask object is not present in a get operation, the\n operation applies to all fields (as if a FieldMask of all fields\n had been specified).\n\n Note that a field mask does not necessarily apply to the\n top-level response message. In case of a REST get operation, the\n field mask applies directly to the response, but in case of a REST\n list operation, the mask instead applies to each individual message\n in the returned resource list. In case of a REST custom method,\n other definitions may be used. Where the mask applies will be\n clearly documented together with its declaration in the API.  In\n any case, the effect on the returned resource/resources is required\n behavior for APIs.\n\n # Field Masks in Update Operations\n\n A field mask in update operations specifies which fields of the\n targeted resource are going to be updated. The API is required\n to only change the values of the fields as specified in the mask\n and leave the others untouched. If a resource is passed in to\n describe the updated values, the API ignores the values of all\n fields not covered by the mask.\n\n If a repeated field is specified for an update operation, new values will\n be appended to the existing repeated field in the target resource. Note that\n a repeated field is only allowed in the last position of a `paths` string.\n\n If a sub-message is specified in the last position of the field mask for an\n update operation, then new value will be merged into the existing sub-message\n in the target resource.\n\n For example, given the target message:\n\n     f {\n       b {\n         d: 1\n         x: 2\n       }\n       c: [1]\n     }\n\n And an update message:\n\n     f {\n       b {\n         d: 10\n       }\n       c: [2]\n     }\n\n then if the field mask is:\n\n  paths: [\"f.b\", \"f.c\"]\n\n then the result will be:\n\n     f {\n       b {\n         d: 10\n         x: 2\n       }\n       c: [1, 2]\n     }\n\n An implementation may provide options to override this default behavior for\n repeated and message fields.\n\n In order to reset a field's value to the default, the field must\n be in the mask and set to the default value in the provided resource.\n Hence, in order to reset all fields of a resource, provide a default\n instance of the resource and set all fields in the mask, or do\n not provide a mask as described below.\n\n If a field mask is not present on update, the operation applies to\n all fields (as if a field mask of all fields has been specified).\n Note that in the presence of schema evolution, this may mean that\n fields the client does not know and has therefore not filled into\n the request will be reset to their default. If this is unwanted\n behavior, a specific service may require a client to always specify\n a field mask, producing an error if not.\n\n As with get operations, the location of the resource which\n describes the updated values in the request message depends on the\n operation kind. In any case, the effect of the field mask is\n required to be honored by the API.\n\n ## Considerations for HTTP REST\n\n The HTTP kind of an update operation which uses a field mask must\n be set to PATCH instead of PUT in order to satisfy HTTP semantics\n (PUT must only be used for full updates).\n\n # JSON Encoding of Field Masks\n\n In JSON, a field mask is encoded as a single string where paths are\n separated by a comma. Fields name in each path are converted\n to/from lower-camel naming conventions.\n\n As an example, consider the following message declarations:\n\n     message Profile {\n       User user = 1;\n       Photo photo = 2;\n     }\n     message User {\n       string display_name = 1;\n       string address = 2;\n     }\n\n In proto a field mask for `Profile` may look as such:\n\n     mask {\n       paths: \"user.display_name\"\n       paths: \"photo\"\n     }\n\n In JSON, the same mask is represented as below:\n\n     {\n       mask: \"user.displayName,photo\"\n     }\n\n # Field Masks and Oneof Fields\n\n Field masks treat fields in oneofs just as regular fields. Consider the\n following message:\n\n     message SampleMessage {\n       oneof test_oneof {\n         string name = 4;\n         SubMessage sub_message = 9;\n       }\n     }\n\n The field mask can be:\n\n     mask {\n       paths: \"name\"\n     }\n\n Or:\n\n     mask {\n       paths: \"sub_message\"\n     }\n\n Note that oneof type names (\"test_oneof\" in this case) cannot be used in\n paths.\n\n ## Field Mask Verification\n\n The implementation of any API method which has a FieldMask type field in the\n request should verify the included field paths, and return an\n `INVALID_ARGUMENT` error if any path is duplicated or unmappable.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            241,
            8,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            243,
            2,
            28
          ],
          "leadingComments": " The set of field mask paths.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            243,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            243,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            243,
            18,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            243,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/source_context.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "SourceContext",
        "fieldList": [
          {
            "name": "file_name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "fileName"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "SourceContextProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "google.golang.org/genproto/protobuf/source_context;source_context",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": false,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            47,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            35,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            36,
            0,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            37,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            38,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            88
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            39,
            0,
            88
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            43,
            0,
            47,
            1
          ],
          "leadingComments": " `SourceContext` represents information about the source of a\n protobuf element, like the file in which it is defined.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            43,
            8,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            46,
            2,
            23
          ],
          "leadingComments": " The path-qualified name of the .proto file that contained the associated\n protobuf element.  For example: `\"google/protobuf/source_context.proto\"`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            46,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            46,
            9,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            46,
            21,
            22
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/any.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Any",
        "fieldList": [
          {
            "name": "type_url",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "typeUrl"
          },
          {
            "name": "value",
            "number": 2,
            "label": 1,
            "type": 12,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "AnyProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/ptypes/any",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": false,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            154,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            60
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            35,
            0,
            60
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            36,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            37,
            0,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            38,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            39,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            121,
            0,
            154,
            1
          ],
          "leadingComments": " `Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(&foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := &pb.Foo{...}\n      any, err := ptypes.MarshalAny(foo)\n      ...\n      foo := &pb.Foo{}\n      if err := ptypes.UnmarshalAny(any, foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": <string>,\n       \"lastName\": <string>\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }\n\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            121,
            8,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            150,
            2,
            22
          ],
          "leadingComments": " A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics.\n\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            150,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            150,
            9,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            150,
            20,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1
          ],
          "spanList": [
            153,
            2,
            18
          ],
          "leadingComments": " Must be a valid serialized protocol buffer of the above specified type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            153,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            153,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            153,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/type.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [
      "google/protobuf/any.proto",
      "google/protobuf/source_context.proto"
    ],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Type",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "fields",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Field",
            "jsonName": "fields"
          },
          {
            "name": "oneofs",
            "number": 3,
            "label": 3,
            "type": 9,
            "jsonName": "oneofs"
          },
          {
            "name": "options",
            "number": 4,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Option",
            "jsonName": "options"
          },
          {
            "name": "source_context",
            "number": 5,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.SourceContext",
            "jsonName": "sourceContext"
          },
          {
            "name": "syntax",
            "number": 6,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.Syntax",
            "jsonName": "syntax"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Field",
        "fieldList": [
          {
            "name": "kind",
            "number": 1,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.Field.Kind",
            "jsonName": "kind"
          },
          {
            "name": "cardinality",
            "number": 2,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.Field.Cardinality",
            "jsonName": "cardinality"
          },
          {
            "name": "number",
            "number": 3,
            "label": 1,
            "type": 5,
            "jsonName": "number"
          },
          {
            "name": "name",
            "number": 4,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "type_url",
            "number": 6,
            "label": 1,
            "type": 9,
            "jsonName": "typeUrl"
          },
          {
            "name": "oneof_index",
            "number": 7,
            "label": 1,
            "type": 5,
            "jsonName": "oneofIndex"
          },
          {
            "name": "packed",
            "number": 8,
            "label": 1,
            "type": 8,
            "jsonName": "packed"
          },
          {
            "name": "options",
            "number": 9,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Option",
            "jsonName": "options"
          },
          {
            "name": "json_name",
            "number": 10,
            "label": 1,
            "type": 9,
            "jsonName": "jsonName"
          },
          {
            "name": "default_value",
            "number": 11,
            "label": 1,
            "type": 9,
            "jsonName": "defaultValue"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [
          {
            "name": "Kind",
            "valueList": [
              {
                "name": "TYPE_UNKNOWN",
                "number": 0
              },
              {
                "name": "TYPE_DOUBLE",
                "number": 1
              },
              {
                "name": "TYPE_FLOAT",
                "number": 2
              },
              {
                "name": "TYPE_INT64",
                "number": 3
              },
              {
                "name": "TYPE_UINT64",
                "number": 4
              },
              {
                "name": "TYPE_INT32",
                "number": 5
              },
              {
                "name": "TYPE_FIXED64",
                "number": 6
              },
              {
                "name": "TYPE_FIXED32",
                "number": 7
              },
              {
                "name": "TYPE_BOOL",
                "number": 8
              },
              {
                "name": "TYPE_STRING",
                "number": 9
              },
              {
                "name": "TYPE_GROUP",
                "number": 10
              },
              {
                "name": "TYPE_MESSAGE",
                "number": 11
              },
              {
                "name": "TYPE_BYTES",
                "number": 12
              },
              {
                "name": "TYPE_UINT32",
                "number": 13
              },
              {
                "name": "TYPE_ENUM",
                "number": 14
              },
              {
                "name": "TYPE_SFIXED32",
                "number": 15
              },
              {
                "name": "TYPE_SFIXED64",
                "number": 16
              },
              {
                "name": "TYPE_SINT32",
                "number": 17
              },
              {
                "name": "TYPE_SINT64",
                "number": 18
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          },
          {
            "name": "Cardinality",
            "valueList": [
              {
                "name": "CARDINALITY_UNKNOWN",
                "number": 0
              },
              {
                "name": "CARDINALITY_OPTIONAL",
                "number": 1
              },
              {
                "name": "CARDINALITY_REQUIRED",
                "number": 2
              },
              {
                "name": "CARDINALITY_REPEATED",
                "number": 3
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Enum",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "enumvalue",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.EnumValue",
            "jsonName": "enumvalue"
          },
          {
            "name": "options",
            "number": 3,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Option",
            "jsonName": "options"
          },
          {
            "name": "source_context",
            "number": 4,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.SourceContext",
            "jsonName": "sourceContext"
          },
          {
            "name": "syntax",
            "number": 5,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.Syntax",
            "jsonName": "syntax"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "EnumValue",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "number",
            "number": 2,
            "label": 1,
            "type": 5,
            "jsonName": "number"
          },
          {
            "name": "options",
            "number": 3,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Option",
            "jsonName": "options"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Option",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "value",
            "number": 2,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.Any",
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [
      {
        "name": "Syntax",
        "valueList": [
          {
            "name": "SYNTAX_PROTO2",
            "number": 0
          },
          {
            "name": "SYNTAX_PROTO3",
            "number": 1
          }
        ],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "TypeProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "google.golang.org/genproto/protobuf/ptype;ptype",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            186,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            3,
            0
          ],
          "spanList": [
            34,
            0,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            3,
            1
          ],
          "spanList": [
            35,
            0,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            37,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            38,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            39,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            40,
            0,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            41,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            41,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            42,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            42,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            43,
            0,
            70
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            43,
            0,
            70
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            46,
            0,
            59,
            1
          ],
          "leadingComments": " A protocol buffer message type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            46,
            8,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            48,
            2,
            18
          ],
          "leadingComments": " The fully qualified message name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            48,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            48,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            48,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1
          ],
          "spanList": [
            50,
            2,
            28
          ],
          "leadingComments": " The list of fields.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            50,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            6
          ],
          "spanList": [
            50,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            50,
            17,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            50,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2
          ],
          "spanList": [
            52,
            2,
            29
          ],
          "leadingComments": " The list of types appearing in `oneof` definitions in this type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            52,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            5
          ],
          "spanList": [
            52,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            52,
            18,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            52,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3
          ],
          "spanList": [
            54,
            2,
            30
          ],
          "leadingComments": " The protocol buffer options.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            4
          ],
          "spanList": [
            54,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            6
          ],
          "spanList": [
            54,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            54,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            3
          ],
          "spanList": [
            54,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4
          ],
          "spanList": [
            56,
            2,
            35
          ],
          "leadingComments": " The source context.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4,
            6
          ],
          "spanList": [
            56,
            2,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4,
            1
          ],
          "spanList": [
            56,
            16,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4,
            3
          ],
          "spanList": [
            56,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5
          ],
          "spanList": [
            58,
            2,
            20
          ],
          "leadingComments": " The source syntax.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            6
          ],
          "spanList": [
            58,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            1
          ],
          "spanList": [
            58,
            9,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            3
          ],
          "spanList": [
            58,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1
          ],
          "spanList": [
            62,
            0,
            139,
            1
          ],
          "leadingComments": " A single field of a message type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            1
          ],
          "spanList": [
            62,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0
          ],
          "spanList": [
            64,
            2,
            103,
            3
          ],
          "leadingComments": " Basic field types.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            1
          ],
          "spanList": [
            64,
            7,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            0
          ],
          "spanList": [
            66,
            4,
            21
          ],
          "leadingComments": " Field type unknown.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            66,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            66,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            1
          ],
          "spanList": [
            68,
            4,
            20
          ],
          "leadingComments": " Field type double.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            68,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            1,
            2
          ],
          "spanList": [
            68,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            2
          ],
          "spanList": [
            70,
            4,
            19
          ],
          "leadingComments": " Field type float.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            70,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            2,
            2
          ],
          "spanList": [
            70,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            3
          ],
          "spanList": [
            72,
            4,
            19
          ],
          "leadingComments": " Field type int64.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            72,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            3,
            2
          ],
          "spanList": [
            72,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            4
          ],
          "spanList": [
            74,
            4,
            20
          ],
          "leadingComments": " Field type uint64.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            4,
            1
          ],
          "spanList": [
            74,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            4,
            2
          ],
          "spanList": [
            74,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            5
          ],
          "spanList": [
            76,
            4,
            19
          ],
          "leadingComments": " Field type int32.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            5,
            1
          ],
          "spanList": [
            76,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            5,
            2
          ],
          "spanList": [
            76,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            6
          ],
          "spanList": [
            78,
            4,
            21
          ],
          "leadingComments": " Field type fixed64.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            6,
            1
          ],
          "spanList": [
            78,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            6,
            2
          ],
          "spanList": [
            78,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            7
          ],
          "spanList": [
            80,
            4,
            21
          ],
          "leadingComments": " Field type fixed32.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            7,
            1
          ],
          "spanList": [
            80,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            7,
            2
          ],
          "spanList": [
            80,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            8
          ],
          "spanList": [
            82,
            4,
            18
          ],
          "leadingComments": " Field type bool.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            8,
            1
          ],
          "spanList": [
            82,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            8,
            2
          ],
          "spanList": [
            82,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            9
          ],
          "spanList": [
            84,
            4,
            20
          ],
          "leadingComments": " Field type string.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            9,
            1
          ],
          "spanList": [
            84,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            9,
            2
          ],
          "spanList": [
            84,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            10
          ],
          "spanList": [
            86,
            4,
            20
          ],
          "leadingComments": " Field type group. Proto2 syntax only, and deprecated.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            10,
            1
          ],
          "spanList": [
            86,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            10,
            2
          ],
          "spanList": [
            86,
            17,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            11
          ],
          "spanList": [
            88,
            4,
            22
          ],
          "leadingComments": " Field type message.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            11,
            1
          ],
          "spanList": [
            88,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            11,
            2
          ],
          "spanList": [
            88,
            19,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            12
          ],
          "spanList": [
            90,
            4,
            20
          ],
          "leadingComments": " Field type bytes.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            12,
            1
          ],
          "spanList": [
            90,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            12,
            2
          ],
          "spanList": [
            90,
            17,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            13
          ],
          "spanList": [
            92,
            4,
            21
          ],
          "leadingComments": " Field type uint32.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            13,
            1
          ],
          "spanList": [
            92,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            13,
            2
          ],
          "spanList": [
            92,
            18,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            14
          ],
          "spanList": [
            94,
            4,
            19
          ],
          "leadingComments": " Field type enum.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            14,
            1
          ],
          "spanList": [
            94,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            14,
            2
          ],
          "spanList": [
            94,
            16,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            15
          ],
          "spanList": [
            96,
            4,
            23
          ],
          "leadingComments": " Field type sfixed32.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            15,
            1
          ],
          "spanList": [
            96,
            4,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            15,
            2
          ],
          "spanList": [
            96,
            20,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            16
          ],
          "spanList": [
            98,
            4,
            23
          ],
          "leadingComments": " Field type sfixed64.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            16,
            1
          ],
          "spanList": [
            98,
            4,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            16,
            2
          ],
          "spanList": [
            98,
            20,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            17
          ],
          "spanList": [
            100,
            4,
            21
          ],
          "leadingComments": " Field type sint32.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            17,
            1
          ],
          "spanList": [
            100,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            17,
            2
          ],
          "spanList": [
            100,
            18,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            18
          ],
          "spanList": [
            102,
            4,
            21
          ],
          "leadingComments": " Field type sint64.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            18,
            1
          ],
          "spanList": [
            102,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            0,
            2,
            18,
            2
          ],
          "spanList": [
            102,
            18,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1
          ],
          "spanList": [
            106,
            2,
            115,
            3
          ],
          "leadingComments": " Whether a field is optional, required, or repeated.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            1
          ],
          "spanList": [
            106,
            7,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            0
          ],
          "spanList": [
            108,
            4,
            28
          ],
          "leadingComments": " For fields with unknown cardinality.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            108,
            4,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            0,
            2
          ],
          "spanList": [
            108,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            1
          ],
          "spanList": [
            110,
            4,
            29
          ],
          "leadingComments": " For optional fields.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            110,
            4,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            1,
            2
          ],
          "spanList": [
            110,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            2
          ],
          "spanList": [
            112,
            4,
            29
          ],
          "leadingComments": " For required fields. Proto2 syntax only.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            112,
            4,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            2,
            2
          ],
          "spanList": [
            112,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            3
          ],
          "spanList": [
            114,
            4,
            29
          ],
          "leadingComments": " For repeated fields.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            3,
            1
          ],
          "spanList": [
            114,
            4,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            4,
            1,
            2,
            3,
            2
          ],
          "spanList": [
            114,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0
          ],
          "spanList": [
            118,
            2,
            16
          ],
          "leadingComments": " The field type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            6
          ],
          "spanList": [
            118,
            2,
            6
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            118,
            7,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            118,
            14,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1
          ],
          "spanList": [
            120,
            2,
            30
          ],
          "leadingComments": " The field cardinality.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            6
          ],
          "spanList": [
            120,
            2,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            120,
            14,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            3
          ],
          "spanList": [
            120,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2
          ],
          "spanList": [
            122,
            2,
            19
          ],
          "leadingComments": " The field number.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            5
          ],
          "spanList": [
            122,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            122,
            8,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            3
          ],
          "spanList": [
            122,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3
          ],
          "spanList": [
            124,
            2,
            18
          ],
          "leadingComments": " The field name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            5
          ],
          "spanList": [
            124,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            1
          ],
          "spanList": [
            124,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            3
          ],
          "spanList": [
            124,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4
          ],
          "spanList": [
            127,
            2,
            22
          ],
          "leadingComments": " The field type URL, without the scheme, for message or enumeration\n types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            5
          ],
          "spanList": [
            127,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            1
          ],
          "spanList": [
            127,
            9,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            3
          ],
          "spanList": [
            127,
            20,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5
          ],
          "spanList": [
            130,
            2,
            24
          ],
          "leadingComments": " The index of the field type in `Type.oneofs`, for message or enumeration\n types. The first type has index 1; zero means the type is not in the list.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            5
          ],
          "spanList": [
            130,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            1
          ],
          "spanList": [
            130,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            3
          ],
          "spanList": [
            130,
            22,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6
          ],
          "spanList": [
            132,
            2,
            18
          ],
          "leadingComments": " Whether to use alternative packed wire representation.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            5
          ],
          "spanList": [
            132,
            2,
            6
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            1
          ],
          "spanList": [
            132,
            7,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            3
          ],
          "spanList": [
            132,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7
          ],
          "spanList": [
            134,
            2,
            30
          ],
          "leadingComments": " The protocol buffer options.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            4
          ],
          "spanList": [
            134,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            6
          ],
          "spanList": [
            134,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            1
          ],
          "spanList": [
            134,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            3
          ],
          "spanList": [
            134,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8
          ],
          "spanList": [
            136,
            2,
            24
          ],
          "leadingComments": " The field JSON name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            5
          ],
          "spanList": [
            136,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            1
          ],
          "spanList": [
            136,
            9,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            3
          ],
          "spanList": [
            136,
            21,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9
          ],
          "spanList": [
            138,
            2,
            28
          ],
          "leadingComments": " The string value of the default value of this field. Proto2 syntax only.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            5
          ],
          "spanList": [
            138,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            1
          ],
          "spanList": [
            138,
            9,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            3
          ],
          "spanList": [
            138,
            25,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2
          ],
          "spanList": [
            142,
            0,
            153,
            1
          ],
          "leadingComments": " Enum type definition.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            1
          ],
          "spanList": [
            142,
            8,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0
          ],
          "spanList": [
            144,
            2,
            18
          ],
          "leadingComments": " Enum type name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            5
          ],
          "spanList": [
            144,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            1
          ],
          "spanList": [
            144,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            3
          ],
          "spanList": [
            144,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1
          ],
          "spanList": [
            146,
            2,
            35
          ],
          "leadingComments": " Enum value definitions.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            4
          ],
          "spanList": [
            146,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            6
          ],
          "spanList": [
            146,
            11,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            1
          ],
          "spanList": [
            146,
            21,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            3
          ],
          "spanList": [
            146,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2
          ],
          "spanList": [
            148,
            2,
            30
          ],
          "leadingComments": " Protocol buffer options.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            4
          ],
          "spanList": [
            148,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            6
          ],
          "spanList": [
            148,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            1
          ],
          "spanList": [
            148,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            3
          ],
          "spanList": [
            148,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3
          ],
          "spanList": [
            150,
            2,
            35
          ],
          "leadingComments": " The source context.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            6
          ],
          "spanList": [
            150,
            2,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            1
          ],
          "spanList": [
            150,
            16,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            3
          ],
          "spanList": [
            150,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4
          ],
          "spanList": [
            152,
            2,
            20
          ],
          "leadingComments": " The source syntax.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            6
          ],
          "spanList": [
            152,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            1
          ],
          "spanList": [
            152,
            9,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            3
          ],
          "spanList": [
            152,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3
          ],
          "spanList": [
            156,
            0,
            163,
            1
          ],
          "leadingComments": " Enum value definition.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            1
          ],
          "spanList": [
            156,
            8,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0
          ],
          "spanList": [
            158,
            2,
            18
          ],
          "leadingComments": " Enum value name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            5
          ],
          "spanList": [
            158,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            1
          ],
          "spanList": [
            158,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            3
          ],
          "spanList": [
            158,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            1
          ],
          "spanList": [
            160,
            2,
            19
          ],
          "leadingComments": " Enum value number.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            1,
            5
          ],
          "spanList": [
            160,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            1,
            1
          ],
          "spanList": [
            160,
            8,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            1,
            3
          ],
          "spanList": [
            160,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            2
          ],
          "spanList": [
            162,
            2,
            30
          ],
          "leadingComments": " Protocol buffer options.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            2,
            4
          ],
          "spanList": [
            162,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            2,
            6
          ],
          "spanList": [
            162,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            2,
            1
          ],
          "spanList": [
            162,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            2,
            3
          ],
          "spanList": [
            162,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4
          ],
          "spanList": [
            167,
            0,
            178,
            1
          ],
          "leadingComments": " A protocol buffer option, which can be attached to a message, field,\n enumeration, etc.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            1
          ],
          "spanList": [
            167,
            8,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0
          ],
          "spanList": [
            172,
            2,
            18
          ],
          "leadingComments": " The option's name. For protobuf built-in options (options defined in\n descriptor.proto), this is the short name. For example, `\"map_entry\"`.\n For custom options, it should be the fully-qualified name. For example,\n `\"google.api.http\"`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            5
          ],
          "spanList": [
            172,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            1
          ],
          "spanList": [
            172,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            3
          ],
          "spanList": [
            172,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1
          ],
          "spanList": [
            177,
            2,
            16
          ],
          "leadingComments": " The option's value packed in an Any message. If the value is a primitive,\n the corresponding wrapper type defined in google/protobuf/wrappers.proto\n should be used. If the value is an enum, it should be stored as an int32\n value using the google.protobuf.Int32Value type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            6
          ],
          "spanList": [
            177,
            2,
            5
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            1
          ],
          "spanList": [
            177,
            6,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            3
          ],
          "spanList": [
            177,
            14,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0
          ],
          "spanList": [
            181,
            0,
            186,
            1
          ],
          "leadingComments": " The syntax in which a protocol buffer element is defined.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            1
          ],
          "spanList": [
            181,
            5,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            0
          ],
          "spanList": [
            183,
            2,
            20
          ],
          "leadingComments": " Syntax `proto2`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            183,
            2,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            183,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            1
          ],
          "spanList": [
            185,
            2,
            20
          ],
          "leadingComments": " Syntax `proto3`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            185,
            2,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            1,
            2
          ],
          "spanList": [
            185,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/api.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [
      "google/protobuf/source_context.proto",
      "google/protobuf/type.proto"
    ],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Api",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "methods",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Method",
            "jsonName": "methods"
          },
          {
            "name": "options",
            "number": 3,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Option",
            "jsonName": "options"
          },
          {
            "name": "version",
            "number": 4,
            "label": 1,
            "type": 9,
            "jsonName": "version"
          },
          {
            "name": "source_context",
            "number": 5,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.SourceContext",
            "jsonName": "sourceContext"
          },
          {
            "name": "mixins",
            "number": 6,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Mixin",
            "jsonName": "mixins"
          },
          {
            "name": "syntax",
            "number": 7,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.Syntax",
            "jsonName": "syntax"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Method",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "request_type_url",
            "number": 2,
            "label": 1,
            "type": 9,
            "jsonName": "requestTypeUrl"
          },
          {
            "name": "request_streaming",
            "number": 3,
            "label": 1,
            "type": 8,
            "jsonName": "requestStreaming"
          },
          {
            "name": "response_type_url",
            "number": 4,
            "label": 1,
            "type": 9,
            "jsonName": "responseTypeUrl"
          },
          {
            "name": "response_streaming",
            "number": 5,
            "label": 1,
            "type": 8,
            "jsonName": "responseStreaming"
          },
          {
            "name": "options",
            "number": 6,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Option",
            "jsonName": "options"
          },
          {
            "name": "syntax",
            "number": 7,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.Syntax",
            "jsonName": "syntax"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Mixin",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "root",
            "number": 2,
            "label": 1,
            "type": 9,
            "jsonName": "root"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "ApiProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "google.golang.org/genproto/protobuf/api;api",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": false,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            209,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            3,
            0
          ],
          "spanList": [
            34,
            0,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            3,
            1
          ],
          "spanList": [
            35,
            0,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            37,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            38,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            39,
            0,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            40,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            41,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            41,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            42,
            0,
            66
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            42,
            0,
            66
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            53,
            0,
            97,
            1
          ],
          "leadingComments": " Api is a light-weight descriptor for an API Interface.\n\n Interfaces are also described as \"protocol buffer services\" in some contexts,\n such as by the \"service\" keyword in a .proto file, but they are different\n from API Services, which represent a concrete implementation of an interface\n as opposed to simply a description of methods and bindings. They are also\n sometimes simply referred to as \"APIs\" in other contexts, such as the name of\n this message itself. See https://cloud.google.com/apis/design/glossary for\n detailed terminology.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            53,
            8,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            57,
            2,
            18
          ],
          "leadingComments": " The fully qualified name of this interface, including package name\n followed by the interface's simple name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            57,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            57,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            57,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1
          ],
          "spanList": [
            60,
            2,
            30
          ],
          "leadingComments": " The methods of this interface, in unspecified order.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            60,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            6
          ],
          "spanList": [
            60,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            60,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            60,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2
          ],
          "spanList": [
            63,
            2,
            30
          ],
          "leadingComments": " Any metadata attached to the interface.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            63,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            6
          ],
          "spanList": [
            63,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            63,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            63,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3
          ],
          "spanList": [
            86,
            2,
            21
          ],
          "leadingComments": " A version string for this interface. If specified, must have the form\n `major-version.minor-version`, as in `1.10`. If the minor version is\n omitted, it defaults to zero. If the entire version field is empty, the\n major version is derived from the package name, as outlined below. If the\n field is not empty, the version in the package name will be verified to be\n consistent with what is provided here.\n\n The versioning schema uses [semantic\n versioning](http://semver.org) where the major version number\n indicates a breaking change and the minor version an additive,\n non-breaking change. Both version numbers are signals to users\n what to expect from different versions, and should be carefully\n chosen based on the product plan.\n\n The major version is also reflected in the package name of the\n interface, which must end in `v<major-version>`, as in\n `google.feature.v1`. For major versions 0 and 1, the suffix can\n be omitted. Zero major versions must only be used for\n experimental, non-GA interfaces.\n\n\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            5
          ],
          "spanList": [
            86,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            86,
            9,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            3
          ],
          "spanList": [
            86,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4
          ],
          "spanList": [
            90,
            2,
            35
          ],
          "leadingComments": " Source context for the protocol buffer service represented by this\n message.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4,
            6
          ],
          "spanList": [
            90,
            2,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4,
            1
          ],
          "spanList": [
            90,
            16,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            4,
            3
          ],
          "spanList": [
            90,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5
          ],
          "spanList": [
            93,
            2,
            28
          ],
          "leadingComments": " Included interfaces. See [Mixin][].\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            4
          ],
          "spanList": [
            93,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            6
          ],
          "spanList": [
            93,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            1
          ],
          "spanList": [
            93,
            17,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            5,
            3
          ],
          "spanList": [
            93,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            6
          ],
          "spanList": [
            96,
            2,
            20
          ],
          "leadingComments": " The source syntax of the service.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            6,
            6
          ],
          "spanList": [
            96,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            6,
            1
          ],
          "spanList": [
            96,
            9,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            6,
            3
          ],
          "spanList": [
            96,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1
          ],
          "spanList": [
            100,
            0,
            122,
            1
          ],
          "leadingComments": " Method represents a method of an API interface.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            1
          ],
          "spanList": [
            100,
            8,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0
          ],
          "spanList": [
            103,
            2,
            18
          ],
          "leadingComments": " The simple name of this method.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            5
          ],
          "spanList": [
            103,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            103,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            103,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1
          ],
          "spanList": [
            106,
            2,
            30
          ],
          "leadingComments": " A URL of the input message type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            5
          ],
          "spanList": [
            106,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            106,
            9,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            3
          ],
          "spanList": [
            106,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2
          ],
          "spanList": [
            109,
            2,
            29
          ],
          "leadingComments": " If true, the request is streamed.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            5
          ],
          "spanList": [
            109,
            2,
            6
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            109,
            7,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            3
          ],
          "spanList": [
            109,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3
          ],
          "spanList": [
            112,
            2,
            31
          ],
          "leadingComments": " The URL of the output message type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            5
          ],
          "spanList": [
            112,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            1
          ],
          "spanList": [
            112,
            9,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            3
          ],
          "spanList": [
            112,
            29,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4
          ],
          "spanList": [
            115,
            2,
            30
          ],
          "leadingComments": " If true, the response is streamed.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            5
          ],
          "spanList": [
            115,
            2,
            6
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            1
          ],
          "spanList": [
            115,
            7,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            3
          ],
          "spanList": [
            115,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5
          ],
          "spanList": [
            118,
            2,
            30
          ],
          "leadingComments": " Any metadata attached to the method.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            4
          ],
          "spanList": [
            118,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            6
          ],
          "spanList": [
            118,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            1
          ],
          "spanList": [
            118,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            3
          ],
          "spanList": [
            118,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6
          ],
          "spanList": [
            121,
            2,
            20
          ],
          "leadingComments": " The source syntax of this method.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            6
          ],
          "spanList": [
            121,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            1
          ],
          "spanList": [
            121,
            9,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            3
          ],
          "spanList": [
            121,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2
          ],
          "spanList": [
            202,
            0,
            209,
            1
          ],
          "leadingComments": " Declares an API Interface to be included in this interface. The including\n interface must redeclare all the methods from the included interface, but\n documentation and options are inherited as follows:\n\n - If after comment and whitespace stripping, the documentation\n   string of the redeclared method is empty, it will be inherited\n   from the original method.\n\n - Each annotation belonging to the service config (http,\n   visibility) which is not set in the redeclared method will be\n   inherited.\n\n - If an http annotation is inherited, the path pattern will be\n   modified as follows. Any version prefix will be replaced by the\n   version of the including interface plus the [root][] path if\n   specified.\n\n Example of a simple mixin:\n\n     package google.acl.v1;\n     service AccessControl {\n       // Get the underlying ACL object.\n       rpc GetAcl(GetAclRequest) returns (Acl) {\n         option (google.api.http).get = \"/v1/{resource=**}:getAcl\";\n       }\n     }\n\n     package google.storage.v2;\n     service Storage {\n       rpc GetAcl(GetAclRequest) returns (Acl);\n\n       // Get a data record.\n       rpc GetData(GetDataRequest) returns (Data) {\n         option (google.api.http).get = \"/v2/{resource=**}\";\n       }\n     }\n\n Example of a mixin configuration:\n\n     apis:\n     - name: google.storage.v2.Storage\n       mixins:\n       - name: google.acl.v1.AccessControl\n\n The mixin construct implies that all methods in `AccessControl` are\n also declared with same name and request/response types in\n `Storage`. A documentation generator or annotation processor will\n see the effective `Storage.GetAcl` method after inherting\n documentation and annotations as follows:\n\n     service Storage {\n       // Get the underlying ACL object.\n       rpc GetAcl(GetAclRequest) returns (Acl) {\n         option (google.api.http).get = \"/v2/{resource=**}:getAcl\";\n       }\n       ...\n     }\n\n Note how the version in the path pattern changed from `v1` to `v2`.\n\n If the `root` field in the mixin is specified, it should be a\n relative path under which inherited HTTP paths are placed. Example:\n\n     apis:\n     - name: google.storage.v2.Storage\n       mixins:\n       - name: google.acl.v1.AccessControl\n         root: acls\n\n This implies the following inherited HTTP annotation:\n\n     service Storage {\n       // Get the underlying ACL object.\n       rpc GetAcl(GetAclRequest) returns (Acl) {\n         option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\";\n       }\n       ...\n     }\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            1
          ],
          "spanList": [
            202,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0
          ],
          "spanList": [
            204,
            2,
            18
          ],
          "leadingComments": " The fully qualified name of the interface which is included.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            5
          ],
          "spanList": [
            204,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            1
          ],
          "spanList": [
            204,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            3
          ],
          "spanList": [
            204,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1
          ],
          "spanList": [
            208,
            2,
            18
          ],
          "leadingComments": " If non-empty specifies a path under which inherited HTTP paths\n are rooted.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            5
          ],
          "spanList": [
            208,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            1
          ],
          "spanList": [
            208,
            9,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            3
          ],
          "spanList": [
            208,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/duration.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Duration",
        "fieldList": [
          {
            "name": "seconds",
            "number": 1,
            "label": 1,
            "type": 3,
            "jsonName": "seconds"
          },
          {
            "name": "nanos",
            "number": 2,
            "label": 1,
            "type": 5,
            "jsonName": "nanos"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "DurationProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/ptypes/duration",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            115,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            35,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            65
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            36,
            0,
            65
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            37,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            38,
            0,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            39,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            40,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            102,
            0,
            115,
            1
          ],
          "leadingComments": " A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.\n\n # Examples\n\n Example 1: Compute Duration from two Timestamps in pseudo code.\n\n     Timestamp start = ...;\n     Timestamp end = ...;\n     Duration duration = ...;\n\n     duration.seconds = end.seconds - start.seconds;\n     duration.nanos = end.nanos - start.nanos;\n\n     if (duration.seconds < 0 && duration.nanos > 0) {\n       duration.seconds += 1;\n       duration.nanos -= 1000000000;\n     } else if (duration.seconds > 0 && duration.nanos < 0) {\n       duration.seconds -= 1;\n       duration.nanos += 1000000000;\n     }\n\n Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n     Timestamp start = ...;\n     Duration duration = ...;\n     Timestamp end = ...;\n\n     end.seconds = start.seconds + duration.seconds;\n     end.nanos = start.nanos + duration.nanos;\n\n     if (end.nanos < 0) {\n       end.seconds -= 1;\n       end.nanos += 1000000000;\n     } else if (end.nanos >= 1000000000) {\n       end.seconds += 1;\n       end.nanos -= 1000000000;\n     }\n\n Example 3: Compute Duration from datetime.timedelta in Python.\n\n     td = datetime.timedelta(days=3, minutes=10)\n     duration = Duration()\n     duration.FromTimedelta(td)\n\n # JSON Mapping\n\n In JSON format, the Duration type is encoded as a string rather than an\n object, where the string ends in the suffix \"s\" (indicating seconds) and\n is preceded by the number of seconds, with nanoseconds expressed as\n fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n microsecond should be expressed in JSON format as \"3.000001s\".\n\n\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            102,
            8,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            106,
            2,
            20
          ],
          "leadingComments": " Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            106,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            106,
            8,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            106,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1
          ],
          "spanList": [
            114,
            2,
            18
          ],
          "leadingComments": " Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            114,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            114,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            114,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/struct.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Struct",
        "fieldList": [
          {
            "name": "fields",
            "number": 1,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Struct.FieldsEntry",
            "jsonName": "fields"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "FieldsEntry",
            "fieldList": [
              {
                "name": "key",
                "number": 1,
                "label": 1,
                "type": 9,
                "jsonName": "key"
              },
              {
                "name": "value",
                "number": 2,
                "label": 1,
                "type": 11,
                "typeName": ".google.protobuf.Value",
                "jsonName": "value"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "options": {
              "messageSetWireFormat": false,
              "noStandardDescriptorAccessor": false,
              "deprecated": false,
              "mapEntry": true,
              "uninterpretedOptionList": []
            },
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Value",
        "fieldList": [
          {
            "name": "null_value",
            "number": 1,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.NullValue",
            "oneofIndex": 0,
            "jsonName": "nullValue"
          },
          {
            "name": "number_value",
            "number": 2,
            "label": 1,
            "type": 1,
            "oneofIndex": 0,
            "jsonName": "numberValue"
          },
          {
            "name": "string_value",
            "number": 3,
            "label": 1,
            "type": 9,
            "oneofIndex": 0,
            "jsonName": "stringValue"
          },
          {
            "name": "bool_value",
            "number": 4,
            "label": 1,
            "type": 8,
            "oneofIndex": 0,
            "jsonName": "boolValue"
          },
          {
            "name": "struct_value",
            "number": 5,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.Struct",
            "oneofIndex": 0,
            "jsonName": "structValue"
          },
          {
            "name": "list_value",
            "number": 6,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.ListValue",
            "oneofIndex": 0,
            "jsonName": "listValue"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [
          {
            "name": "kind"
          }
        ],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "ListValue",
        "fieldList": [
          {
            "name": "values",
            "number": 1,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.Value",
            "jsonName": "values"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [
      {
        "name": "NullValue",
        "valueList": [
          {
            "name": "NULL_VALUE",
            "number": 0
          }
        ],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "StructProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/ptypes/struct;structpb",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            94,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            35,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            72
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            36,
            0,
            72
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            37,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            38,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            39,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            40,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            50,
            0,
            53,
            1
          ],
          "leadingComments": " `Struct` represents a structured data value, consisting of fields\n which map to dynamically typed values. In some languages, `Struct`\n might be supported by a native representation. For example, in\n scripting languages like JS a struct is represented as an\n object. The details of that representation are described together\n with the proto support for the language.\n\n The JSON representation for `Struct` is JSON object.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            50,
            8,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            52,
            2,
            32
          ],
          "leadingComments": " Unordered map of dynamically typed values.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            6
          ],
          "spanList": [
            52,
            2,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            52,
            21,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            52,
            30,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1
          ],
          "spanList": [
            61,
            0,
            77,
            1
          ],
          "leadingComments": " `Value` represents a dynamically typed value which can be either\n null, a number, a string, a boolean, a recursive struct value, or a\n list of values. A producer of value is expected to set one of that\n variants, absence of any variant indicates an error.\n\n The JSON representation for `Value` is JSON value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            1
          ],
          "spanList": [
            61,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            8,
            0
          ],
          "spanList": [
            63,
            2,
            76,
            3
          ],
          "leadingComments": " The kind of value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            8,
            0,
            1
          ],
          "spanList": [
            63,
            8,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0
          ],
          "spanList": [
            65,
            4,
            29
          ],
          "leadingComments": " Represents a null value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            6
          ],
          "spanList": [
            65,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            65,
            14,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            65,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1
          ],
          "spanList": [
            67,
            4,
            28
          ],
          "leadingComments": " Represents a double value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            5
          ],
          "spanList": [
            67,
            4,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            67,
            11,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            3
          ],
          "spanList": [
            67,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2
          ],
          "spanList": [
            69,
            4,
            28
          ],
          "leadingComments": " Represents a string value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            5
          ],
          "spanList": [
            69,
            4,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            69,
            11,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            3
          ],
          "spanList": [
            69,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3
          ],
          "spanList": [
            71,
            4,
            24
          ],
          "leadingComments": " Represents a boolean value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            5
          ],
          "spanList": [
            71,
            4,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            1
          ],
          "spanList": [
            71,
            9,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            3
          ],
          "spanList": [
            71,
            22,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4
          ],
          "spanList": [
            73,
            4,
            28
          ],
          "leadingComments": " Represents a structured value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            6
          ],
          "spanList": [
            73,
            4,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            1
          ],
          "spanList": [
            73,
            11,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            3
          ],
          "spanList": [
            73,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5
          ],
          "spanList": [
            75,
            4,
            29
          ],
          "leadingComments": " Represents a repeated `Value`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            6
          ],
          "spanList": [
            75,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            1
          ],
          "spanList": [
            75,
            14,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            3
          ],
          "spanList": [
            75,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0
          ],
          "spanList": [
            83,
            0,
            86,
            1
          ],
          "leadingComments": " `NullValue` is a singleton enumeration to represent the null value for the\n `Value` type union.\n\n  The JSON representation for `NullValue` is JSON `null`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            1
          ],
          "spanList": [
            83,
            5,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            0
          ],
          "spanList": [
            85,
            2,
            17
          ],
          "leadingComments": " Null value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            85,
            2,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            5,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            85,
            15,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2
          ],
          "spanList": [
            91,
            0,
            94,
            1
          ],
          "leadingComments": " `ListValue` is a wrapper around a repeated field of values.\n\n The JSON representation for `ListValue` is JSON array.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            1
          ],
          "spanList": [
            91,
            8,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0
          ],
          "spanList": [
            93,
            2,
            28
          ],
          "leadingComments": " Repeated field of dynamically typed values.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            4
          ],
          "spanList": [
            93,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            6
          ],
          "spanList": [
            93,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            1
          ],
          "spanList": [
            93,
            17,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            3
          ],
          "spanList": [
            93,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/wrappers.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "DoubleValue",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 1,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "FloatValue",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 2,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Int64Value",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 3,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "UInt64Value",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 4,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "Int32Value",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 5,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "UInt32Value",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 13,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "BoolValue",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 8,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "StringValue",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "BytesValue",
        "fieldList": [
          {
            "name": "value",
            "number": 1,
            "label": 1,
            "type": 12,
            "jsonName": "value"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "WrappersProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/ptypes/wrappers",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            40,
            0,
            122,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            40,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
            " Wrappers for primitive (non-message) types. These types are useful\n for embedding primitives in the `google.protobuf.Any` type and for places\n where we need to distinguish between the absence of a primitive\n typed field and its default value.\n\n These wrappers have no meaningful use within repeated fields as they lack\n the ability to detect presence on individual elements.\n These wrappers have no meaningful use within a map or a oneof since\n individual entries of a map or fields of a oneof can already detect presence.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            42,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            44,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            44,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            45,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            45,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            46,
            0,
            65
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            46,
            0,
            65
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            47,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            47,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            48,
            0,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            48,
            0,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            49,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            49,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            50,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            50,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            55,
            0,
            58,
            1
          ],
          "leadingComments": " Wrapper message for `double`.\n\n The JSON representation for `DoubleValue` is JSON number.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            55,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            57,
            2,
            19
          ],
          "leadingComments": " The double value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            57,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            57,
            9,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            57,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1
          ],
          "spanList": [
            63,
            0,
            66,
            1
          ],
          "leadingComments": " Wrapper message for `float`.\n\n The JSON representation for `FloatValue` is JSON number.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            1
          ],
          "spanList": [
            63,
            8,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0
          ],
          "spanList": [
            65,
            2,
            18
          ],
          "leadingComments": " The float value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            5
          ],
          "spanList": [
            65,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            65,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            65,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2
          ],
          "spanList": [
            71,
            0,
            74,
            1
          ],
          "leadingComments": " Wrapper message for `int64`.\n\n The JSON representation for `Int64Value` is JSON string.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            1
          ],
          "spanList": [
            71,
            8,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0
          ],
          "spanList": [
            73,
            2,
            18
          ],
          "leadingComments": " The int64 value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            5
          ],
          "spanList": [
            73,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            1
          ],
          "spanList": [
            73,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            3
          ],
          "spanList": [
            73,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3
          ],
          "spanList": [
            79,
            0,
            82,
            1
          ],
          "leadingComments": " Wrapper message for `uint64`.\n\n The JSON representation for `UInt64Value` is JSON string.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            1
          ],
          "spanList": [
            79,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0
          ],
          "spanList": [
            81,
            2,
            19
          ],
          "leadingComments": " The uint64 value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            5
          ],
          "spanList": [
            81,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            1
          ],
          "spanList": [
            81,
            9,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            3
          ],
          "spanList": [
            81,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4
          ],
          "spanList": [
            87,
            0,
            90,
            1
          ],
          "leadingComments": " Wrapper message for `int32`.\n\n The JSON representation for `Int32Value` is JSON number.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            1
          ],
          "spanList": [
            87,
            8,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0
          ],
          "spanList": [
            89,
            2,
            18
          ],
          "leadingComments": " The int32 value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            5
          ],
          "spanList": [
            89,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            1
          ],
          "spanList": [
            89,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            3
          ],
          "spanList": [
            89,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5
          ],
          "spanList": [
            95,
            0,
            98,
            1
          ],
          "leadingComments": " Wrapper message for `uint32`.\n\n The JSON representation for `UInt32Value` is JSON number.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            1
          ],
          "spanList": [
            95,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0
          ],
          "spanList": [
            97,
            2,
            19
          ],
          "leadingComments": " The uint32 value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            5
          ],
          "spanList": [
            97,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            1
          ],
          "spanList": [
            97,
            9,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            3
          ],
          "spanList": [
            97,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6
          ],
          "spanList": [
            103,
            0,
            106,
            1
          ],
          "leadingComments": " Wrapper message for `bool`.\n\n The JSON representation for `BoolValue` is JSON `true` and `false`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            1
          ],
          "spanList": [
            103,
            8,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0
          ],
          "spanList": [
            105,
            2,
            17
          ],
          "leadingComments": " The bool value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            5
          ],
          "spanList": [
            105,
            2,
            6
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            1
          ],
          "spanList": [
            105,
            7,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            3
          ],
          "spanList": [
            105,
            15,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7
          ],
          "spanList": [
            111,
            0,
            114,
            1
          ],
          "leadingComments": " Wrapper message for `string`.\n\n The JSON representation for `StringValue` is JSON string.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            1
          ],
          "spanList": [
            111,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0
          ],
          "spanList": [
            113,
            2,
            19
          ],
          "leadingComments": " The string value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            5
          ],
          "spanList": [
            113,
            2,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            1
          ],
          "spanList": [
            113,
            9,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            3
          ],
          "spanList": [
            113,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8
          ],
          "spanList": [
            119,
            0,
            122,
            1
          ],
          "leadingComments": " Wrapper message for `bytes`.\n\n The JSON representation for `BytesValue` is JSON string.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            1
          ],
          "spanList": [
            119,
            8,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0
          ],
          "spanList": [
            121,
            2,
            18
          ],
          "leadingComments": " The bytes value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            5
          ],
          "spanList": [
            121,
            2,
            7
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            1
          ],
          "spanList": [
            121,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            3
          ],
          "spanList": [
            121,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/empty.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Empty",
        "fieldList": [],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "EmptyProto",
      "javaMultipleFiles": true,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/ptypes/empty",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.WellKnownTypes",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            30,
            0,
            51,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            30,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            32,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            34,
            0,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            35,
            0,
            62
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            35,
            0,
            62
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            36,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            36,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            37,
            0,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            37,
            0,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            38,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            10
          ],
          "spanList": [
            38,
            0,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            39,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            39,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            40,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            40,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            51,
            0,
            16
          ],
          "leadingComments": " A generic empty message that you can re-use to avoid defining duplicated\n empty messages in your APIs. A typical example is to use it as the request\n or the response type of an API method. For instance:\n\n     service Foo {\n       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n     }\n\n The JSON representation for `Empty` is empty JSON object `{}`.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            51,
            8,
            13
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    },
    "syntax": "proto3"
  },
  {
    "name": "google/protobuf/descriptor.proto",
    "pb_package": "google.protobuf",
    "dependencyList": [],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "FileDescriptorSet",
        "fieldList": [
          {
            "name": "file",
            "number": 1,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.FileDescriptorProto",
            "jsonName": "file"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "FileDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "package",
            "number": 2,
            "label": 1,
            "type": 9,
            "jsonName": "package"
          },
          {
            "name": "dependency",
            "number": 3,
            "label": 3,
            "type": 9,
            "jsonName": "dependency"
          },
          {
            "name": "public_dependency",
            "number": 10,
            "label": 3,
            "type": 5,
            "jsonName": "publicDependency"
          },
          {
            "name": "weak_dependency",
            "number": 11,
            "label": 3,
            "type": 5,
            "jsonName": "weakDependency"
          },
          {
            "name": "message_type",
            "number": 4,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.DescriptorProto",
            "jsonName": "messageType"
          },
          {
            "name": "enum_type",
            "number": 5,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.EnumDescriptorProto",
            "jsonName": "enumType"
          },
          {
            "name": "service",
            "number": 6,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.ServiceDescriptorProto",
            "jsonName": "service"
          },
          {
            "name": "extension",
            "number": 7,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.FieldDescriptorProto",
            "jsonName": "extension"
          },
          {
            "name": "options",
            "number": 8,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.FileOptions",
            "jsonName": "options"
          },
          {
            "name": "source_code_info",
            "number": 9,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.SourceCodeInfo",
            "jsonName": "sourceCodeInfo"
          },
          {
            "name": "syntax",
            "number": 12,
            "label": 1,
            "type": 9,
            "jsonName": "syntax"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "DescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "field",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.FieldDescriptorProto",
            "jsonName": "field"
          },
          {
            "name": "extension",
            "number": 6,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.FieldDescriptorProto",
            "jsonName": "extension"
          },
          {
            "name": "nested_type",
            "number": 3,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.DescriptorProto",
            "jsonName": "nestedType"
          },
          {
            "name": "enum_type",
            "number": 4,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.EnumDescriptorProto",
            "jsonName": "enumType"
          },
          {
            "name": "extension_range",
            "number": 5,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.DescriptorProto.ExtensionRange",
            "jsonName": "extensionRange"
          },
          {
            "name": "oneof_decl",
            "number": 8,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.OneofDescriptorProto",
            "jsonName": "oneofDecl"
          },
          {
            "name": "options",
            "number": 7,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.MessageOptions",
            "jsonName": "options"
          },
          {
            "name": "reserved_range",
            "number": 9,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.DescriptorProto.ReservedRange",
            "jsonName": "reservedRange"
          },
          {
            "name": "reserved_name",
            "number": 10,
            "label": 3,
            "type": 9,
            "jsonName": "reservedName"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "ExtensionRange",
            "fieldList": [
              {
                "name": "start",
                "number": 1,
                "label": 1,
                "type": 5,
                "jsonName": "start"
              },
              {
                "name": "end",
                "number": 2,
                "label": 1,
                "type": 5,
                "jsonName": "end"
              },
              {
                "name": "options",
                "number": 3,
                "label": 1,
                "type": 11,
                "typeName": ".google.protobuf.ExtensionRangeOptions",
                "jsonName": "options"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          },
          {
            "name": "ReservedRange",
            "fieldList": [
              {
                "name": "start",
                "number": 1,
                "label": 1,
                "type": 5,
                "jsonName": "start"
              },
              {
                "name": "end",
                "number": 2,
                "label": 1,
                "type": 5,
                "jsonName": "end"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "ExtensionRangeOptions",
        "fieldList": [
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "FieldDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "number",
            "number": 3,
            "label": 1,
            "type": 5,
            "jsonName": "number"
          },
          {
            "name": "label",
            "number": 4,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.FieldDescriptorProto.Label",
            "jsonName": "label"
          },
          {
            "name": "type",
            "number": 5,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.FieldDescriptorProto.Type",
            "jsonName": "type"
          },
          {
            "name": "type_name",
            "number": 6,
            "label": 1,
            "type": 9,
            "jsonName": "typeName"
          },
          {
            "name": "extendee",
            "number": 2,
            "label": 1,
            "type": 9,
            "jsonName": "extendee"
          },
          {
            "name": "default_value",
            "number": 7,
            "label": 1,
            "type": 9,
            "jsonName": "defaultValue"
          },
          {
            "name": "oneof_index",
            "number": 9,
            "label": 1,
            "type": 5,
            "jsonName": "oneofIndex"
          },
          {
            "name": "json_name",
            "number": 10,
            "label": 1,
            "type": 9,
            "jsonName": "jsonName"
          },
          {
            "name": "options",
            "number": 8,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.FieldOptions",
            "jsonName": "options"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [
          {
            "name": "Type",
            "valueList": [
              {
                "name": "TYPE_DOUBLE",
                "number": 1
              },
              {
                "name": "TYPE_FLOAT",
                "number": 2
              },
              {
                "name": "TYPE_INT64",
                "number": 3
              },
              {
                "name": "TYPE_UINT64",
                "number": 4
              },
              {
                "name": "TYPE_INT32",
                "number": 5
              },
              {
                "name": "TYPE_FIXED64",
                "number": 6
              },
              {
                "name": "TYPE_FIXED32",
                "number": 7
              },
              {
                "name": "TYPE_BOOL",
                "number": 8
              },
              {
                "name": "TYPE_STRING",
                "number": 9
              },
              {
                "name": "TYPE_GROUP",
                "number": 10
              },
              {
                "name": "TYPE_MESSAGE",
                "number": 11
              },
              {
                "name": "TYPE_BYTES",
                "number": 12
              },
              {
                "name": "TYPE_UINT32",
                "number": 13
              },
              {
                "name": "TYPE_ENUM",
                "number": 14
              },
              {
                "name": "TYPE_SFIXED32",
                "number": 15
              },
              {
                "name": "TYPE_SFIXED64",
                "number": 16
              },
              {
                "name": "TYPE_SINT32",
                "number": 17
              },
              {
                "name": "TYPE_SINT64",
                "number": 18
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          },
          {
            "name": "Label",
            "valueList": [
              {
                "name": "LABEL_OPTIONAL",
                "number": 1
              },
              {
                "name": "LABEL_REQUIRED",
                "number": 2
              },
              {
                "name": "LABEL_REPEATED",
                "number": 3
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "OneofDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "options",
            "number": 2,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.OneofOptions",
            "jsonName": "options"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "EnumDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "value",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.EnumValueDescriptorProto",
            "jsonName": "value"
          },
          {
            "name": "options",
            "number": 3,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.EnumOptions",
            "jsonName": "options"
          },
          {
            "name": "reserved_range",
            "number": 4,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.EnumDescriptorProto.EnumReservedRange",
            "jsonName": "reservedRange"
          },
          {
            "name": "reserved_name",
            "number": 5,
            "label": 3,
            "type": 9,
            "jsonName": "reservedName"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "EnumReservedRange",
            "fieldList": [
              {
                "name": "start",
                "number": 1,
                "label": 1,
                "type": 5,
                "jsonName": "start"
              },
              {
                "name": "end",
                "number": 2,
                "label": 1,
                "type": 5,
                "jsonName": "end"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "EnumValueDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "number",
            "number": 2,
            "label": 1,
            "type": 5,
            "jsonName": "number"
          },
          {
            "name": "options",
            "number": 3,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.EnumValueOptions",
            "jsonName": "options"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "ServiceDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "method",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.MethodDescriptorProto",
            "jsonName": "method"
          },
          {
            "name": "options",
            "number": 3,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.ServiceOptions",
            "jsonName": "options"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "MethodDescriptorProto",
        "fieldList": [
          {
            "name": "name",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "name"
          },
          {
            "name": "input_type",
            "number": 2,
            "label": 1,
            "type": 9,
            "jsonName": "inputType"
          },
          {
            "name": "output_type",
            "number": 3,
            "label": 1,
            "type": 9,
            "jsonName": "outputType"
          },
          {
            "name": "options",
            "number": 4,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.MethodOptions",
            "jsonName": "options"
          },
          {
            "name": "client_streaming",
            "number": 5,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "clientStreaming"
          },
          {
            "name": "server_streaming",
            "number": 6,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "serverStreaming"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "FileOptions",
        "fieldList": [
          {
            "name": "java_package",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "javaPackage"
          },
          {
            "name": "java_outer_classname",
            "number": 8,
            "label": 1,
            "type": 9,
            "jsonName": "javaOuterClassname"
          },
          {
            "name": "java_multiple_files",
            "number": 10,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "javaMultipleFiles"
          },
          {
            "name": "java_generate_equals_and_hash",
            "number": 20,
            "label": 1,
            "type": 8,
            "jsonName": "javaGenerateEqualsAndHash",
            "options": {
              "ctype": 0,
              "jstype": 0,
              "lazy": false,
              "deprecated": true,
              "weak": false,
              "uninterpretedOptionList": []
            }
          },
          {
            "name": "java_string_check_utf8",
            "number": 27,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "javaStringCheckUtf8"
          },
          {
            "name": "optimize_for",
            "number": 9,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.FileOptions.OptimizeMode",
            "defaultValue": "SPEED",
            "jsonName": "optimizeFor"
          },
          {
            "name": "go_package",
            "number": 11,
            "label": 1,
            "type": 9,
            "jsonName": "goPackage"
          },
          {
            "name": "cc_generic_services",
            "number": 16,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "ccGenericServices"
          },
          {
            "name": "java_generic_services",
            "number": 17,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "javaGenericServices"
          },
          {
            "name": "py_generic_services",
            "number": 18,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "pyGenericServices"
          },
          {
            "name": "php_generic_services",
            "number": 42,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "phpGenericServices"
          },
          {
            "name": "deprecated",
            "number": 23,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "cc_enable_arenas",
            "number": 31,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "ccEnableArenas"
          },
          {
            "name": "objc_class_prefix",
            "number": 36,
            "label": 1,
            "type": 9,
            "jsonName": "objcClassPrefix"
          },
          {
            "name": "csharp_namespace",
            "number": 37,
            "label": 1,
            "type": 9,
            "jsonName": "csharpNamespace"
          },
          {
            "name": "swift_prefix",
            "number": 39,
            "label": 1,
            "type": 9,
            "jsonName": "swiftPrefix"
          },
          {
            "name": "php_class_prefix",
            "number": 40,
            "label": 1,
            "type": 9,
            "jsonName": "phpClassPrefix"
          },
          {
            "name": "php_namespace",
            "number": 41,
            "label": 1,
            "type": 9,
            "jsonName": "phpNamespace"
          },
          {
            "name": "php_metadata_namespace",
            "number": 44,
            "label": 1,
            "type": 9,
            "jsonName": "phpMetadataNamespace"
          },
          {
            "name": "ruby_package",
            "number": 45,
            "label": 1,
            "type": 9,
            "jsonName": "rubyPackage"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [
          {
            "name": "OptimizeMode",
            "valueList": [
              {
                "name": "SPEED",
                "number": 1
              },
              {
                "name": "CODE_SIZE",
                "number": 2
              },
              {
                "name": "LITE_RUNTIME",
                "number": 3
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [
          {
            "start": 38,
            "end": 39
          }
        ],
        "reservedNameList": []
      },
      {
        "name": "MessageOptions",
        "fieldList": [
          {
            "name": "message_set_wire_format",
            "number": 1,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "messageSetWireFormat"
          },
          {
            "name": "no_standard_descriptor_accessor",
            "number": 2,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "noStandardDescriptorAccessor"
          },
          {
            "name": "deprecated",
            "number": 3,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "map_entry",
            "number": 7,
            "label": 1,
            "type": 8,
            "jsonName": "mapEntry"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [
          {
            "start": 8,
            "end": 9
          },
          {
            "start": 9,
            "end": 10
          }
        ],
        "reservedNameList": []
      },
      {
        "name": "FieldOptions",
        "fieldList": [
          {
            "name": "ctype",
            "number": 1,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.FieldOptions.CType",
            "defaultValue": "STRING",
            "jsonName": "ctype"
          },
          {
            "name": "packed",
            "number": 2,
            "label": 1,
            "type": 8,
            "jsonName": "packed"
          },
          {
            "name": "jstype",
            "number": 6,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.FieldOptions.JSType",
            "defaultValue": "JS_NORMAL",
            "jsonName": "jstype"
          },
          {
            "name": "lazy",
            "number": 5,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "lazy"
          },
          {
            "name": "deprecated",
            "number": 3,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "weak",
            "number": 10,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "weak"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [
          {
            "name": "CType",
            "valueList": [
              {
                "name": "STRING",
                "number": 0
              },
              {
                "name": "CORD",
                "number": 1
              },
              {
                "name": "STRING_PIECE",
                "number": 2
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          },
          {
            "name": "JSType",
            "valueList": [
              {
                "name": "JS_NORMAL",
                "number": 0
              },
              {
                "name": "JS_STRING",
                "number": 1
              },
              {
                "name": "JS_NUMBER",
                "number": 2
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [
          {
            "start": 4,
            "end": 5
          }
        ],
        "reservedNameList": []
      },
      {
        "name": "OneofOptions",
        "fieldList": [
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "EnumOptions",
        "fieldList": [
          {
            "name": "allow_alias",
            "number": 2,
            "label": 1,
            "type": 8,
            "jsonName": "allowAlias"
          },
          {
            "name": "deprecated",
            "number": 3,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [
          {
            "start": 5,
            "end": 6
          }
        ],
        "reservedNameList": []
      },
      {
        "name": "EnumValueOptions",
        "fieldList": [
          {
            "name": "deprecated",
            "number": 1,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "ServiceOptions",
        "fieldList": [
          {
            "name": "deprecated",
            "number": 33,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "MethodOptions",
        "fieldList": [
          {
            "name": "deprecated",
            "number": 33,
            "label": 1,
            "type": 8,
            "defaultValue": "false",
            "jsonName": "deprecated"
          },
          {
            "name": "idempotency_level",
            "number": 34,
            "label": 1,
            "type": 14,
            "typeName": ".google.protobuf.MethodOptions.IdempotencyLevel",
            "defaultValue": "IDEMPOTENCY_UNKNOWN",
            "jsonName": "idempotencyLevel"
          },
          {
            "name": "uninterpreted_option",
            "number": 999,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption",
            "jsonName": "uninterpretedOption"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [
          {
            "name": "IdempotencyLevel",
            "valueList": [
              {
                "name": "IDEMPOTENCY_UNKNOWN",
                "number": 0
              },
              {
                "name": "NO_SIDE_EFFECTS",
                "number": 1
              },
              {
                "name": "IDEMPOTENT",
                "number": 2
              }
            ],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "extensionRangeList": [
          {
            "start": 1000,
            "end": 536870912
          }
        ],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "UninterpretedOption",
        "fieldList": [
          {
            "name": "name",
            "number": 2,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.UninterpretedOption.NamePart",
            "jsonName": "name"
          },
          {
            "name": "identifier_value",
            "number": 3,
            "label": 1,
            "type": 9,
            "jsonName": "identifierValue"
          },
          {
            "name": "positive_int_value",
            "number": 4,
            "label": 1,
            "type": 4,
            "jsonName": "positiveIntValue"
          },
          {
            "name": "negative_int_value",
            "number": 5,
            "label": 1,
            "type": 3,
            "jsonName": "negativeIntValue"
          },
          {
            "name": "double_value",
            "number": 6,
            "label": 1,
            "type": 1,
            "jsonName": "doubleValue"
          },
          {
            "name": "string_value",
            "number": 7,
            "label": 1,
            "type": 12,
            "jsonName": "stringValue"
          },
          {
            "name": "aggregate_value",
            "number": 8,
            "label": 1,
            "type": 9,
            "jsonName": "aggregateValue"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "NamePart",
            "fieldList": [
              {
                "name": "name_part",
                "number": 1,
                "label": 2,
                "type": 9,
                "jsonName": "namePart"
              },
              {
                "name": "is_extension",
                "number": 2,
                "label": 2,
                "type": 8,
                "jsonName": "isExtension"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "SourceCodeInfo",
        "fieldList": [
          {
            "name": "location",
            "number": 1,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.SourceCodeInfo.Location",
            "jsonName": "location"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "Location",
            "fieldList": [
              {
                "name": "path",
                "number": 1,
                "label": 3,
                "type": 5,
                "jsonName": "path",
                "options": {
                  "ctype": 0,
                  "packed": true,
                  "jstype": 0,
                  "lazy": false,
                  "deprecated": false,
                  "weak": false,
                  "uninterpretedOptionList": []
                }
              },
              {
                "name": "span",
                "number": 2,
                "label": 3,
                "type": 5,
                "jsonName": "span",
                "options": {
                  "ctype": 0,
                  "packed": true,
                  "jstype": 0,
                  "lazy": false,
                  "deprecated": false,
                  "weak": false,
                  "uninterpretedOptionList": []
                }
              },
              {
                "name": "leading_comments",
                "number": 3,
                "label": 1,
                "type": 9,
                "jsonName": "leadingComments"
              },
              {
                "name": "trailing_comments",
                "number": 4,
                "label": 1,
                "type": 9,
                "jsonName": "trailingComments"
              },
              {
                "name": "leading_detached_comments",
                "number": 6,
                "label": 3,
                "type": 9,
                "jsonName": "leadingDetachedComments"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "GeneratedCodeInfo",
        "fieldList": [
          {
            "name": "annotation",
            "number": 1,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.GeneratedCodeInfo.Annotation",
            "jsonName": "annotation"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "Annotation",
            "fieldList": [
              {
                "name": "path",
                "number": 1,
                "label": 3,
                "type": 5,
                "jsonName": "path",
                "options": {
                  "ctype": 0,
                  "packed": true,
                  "jstype": 0,
                  "lazy": false,
                  "deprecated": false,
                  "weak": false,
                  "uninterpretedOptionList": []
                }
              },
              {
                "name": "source_file",
                "number": 2,
                "label": 1,
                "type": 9,
                "jsonName": "sourceFile"
              },
              {
                "name": "begin",
                "number": 3,
                "label": 1,
                "type": 5,
                "jsonName": "begin"
              },
              {
                "name": "end",
                "number": 4,
                "label": 1,
                "type": 5,
                "jsonName": "end"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf",
      "javaOuterClassname": "DescriptorProtos",
      "javaMultipleFiles": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "GPB",
      "csharpNamespace": "Google.Protobuf.Reflection",
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            39,
            0,
            884,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            39,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
            " Author: kenton@google.com (Kenton Varda)\n  Based on original Protocol Buffers design by\n  Sanjay Ghemawat, Jeff Dean, and others.\n\n The messages in this file describe the definitions found in .proto files.\n A valid .proto file can be translated directly to a FileDescriptorProto\n without any other information (e.g. without reading its imports).\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            41,
            0,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            43,
            0,
            85
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            43,
            0,
            85
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            44,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            44,
            0,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            45,
            0,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            45,
            0,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            46,
            0,
            55
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            37
          ],
          "spanList": [
            46,
            0,
            55
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            47,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            36
          ],
          "spanList": [
            47,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            48,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            31
          ],
          "spanList": [
            48,
            0,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            52,
            0,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            9
          ],
          "spanList": [
            52,
            0,
            28
          ],
          "leadingComments": " descriptor.proto must be optimized for speed because reflection-based\n algorithms don't work during bootstrapping.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            56,
            0,
            58,
            1
          ],
          "leadingComments": " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            56,
            8,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            57,
            2,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            57,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            6
          ],
          "spanList": [
            57,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            57,
            31,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            57,
            38,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1
          ],
          "spanList": [
            61,
            0,
            90,
            1
          ],
          "leadingComments": " Describes a complete .proto file.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            1
          ],
          "spanList": [
            61,
            8,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0
          ],
          "spanList": [
            62,
            2,
            27
          ],
          "trailingComments": " file name, relative to root of source tree\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            4
          ],
          "spanList": [
            62,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            5
          ],
          "spanList": [
            62,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            62,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            62,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1
          ],
          "spanList": [
            63,
            2,
            30
          ],
          "trailingComments": " e.g. \"foo\", \"foo.bar\", etc.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            4
          ],
          "spanList": [
            63,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            5
          ],
          "spanList": [
            63,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            63,
            18,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            3
          ],
          "spanList": [
            63,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2
          ],
          "spanList": [
            66,
            2,
            33
          ],
          "leadingComments": " Names of files imported by this file.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            4
          ],
          "spanList": [
            66,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            5
          ],
          "spanList": [
            66,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            66,
            18,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            3
          ],
          "spanList": [
            66,
            31,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3
          ],
          "spanList": [
            68,
            2,
            40
          ],
          "leadingComments": " Indexes of the public imported files in the dependency list above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            4
          ],
          "spanList": [
            68,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            5
          ],
          "spanList": [
            68,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            1
          ],
          "spanList": [
            68,
            17,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            3
          ],
          "spanList": [
            68,
            37,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4
          ],
          "spanList": [
            71,
            2,
            38
          ],
          "leadingComments": " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            4
          ],
          "spanList": [
            71,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            5
          ],
          "spanList": [
            71,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            1
          ],
          "spanList": [
            71,
            17,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            4,
            3
          ],
          "spanList": [
            71,
            35,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5
          ],
          "spanList": [
            74,
            2,
            44
          ],
          "leadingComments": " All top-level definitions in this file.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            4
          ],
          "spanList": [
            74,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            6
          ],
          "spanList": [
            74,
            11,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            1
          ],
          "spanList": [
            74,
            27,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            5,
            3
          ],
          "spanList": [
            74,
            42,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6
          ],
          "spanList": [
            75,
            2,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            4
          ],
          "spanList": [
            75,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            6
          ],
          "spanList": [
            75,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            1
          ],
          "spanList": [
            75,
            31,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            6,
            3
          ],
          "spanList": [
            75,
            43,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7
          ],
          "spanList": [
            76,
            2,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            4
          ],
          "spanList": [
            76,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            6
          ],
          "spanList": [
            76,
            11,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            1
          ],
          "spanList": [
            76,
            34,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            7,
            3
          ],
          "spanList": [
            76,
            44,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8
          ],
          "spanList": [
            77,
            2,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            4
          ],
          "spanList": [
            77,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            6
          ],
          "spanList": [
            77,
            11,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            1
          ],
          "spanList": [
            77,
            32,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            8,
            3
          ],
          "spanList": [
            77,
            44,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9
          ],
          "spanList": [
            79,
            2,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            4
          ],
          "spanList": [
            79,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            6
          ],
          "spanList": [
            79,
            11,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            1
          ],
          "spanList": [
            79,
            23,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            9,
            3
          ],
          "spanList": [
            79,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            10
          ],
          "spanList": [
            85,
            2,
            47
          ],
          "leadingComments": " This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            10,
            4
          ],
          "spanList": [
            85,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            10,
            6
          ],
          "spanList": [
            85,
            11,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            10,
            1
          ],
          "spanList": [
            85,
            26,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            10,
            3
          ],
          "spanList": [
            85,
            45,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            11
          ],
          "spanList": [
            89,
            2,
            30
          ],
          "leadingComments": " The syntax of the proto file.\n The supported values are \"proto2\" and \"proto3\".\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            11,
            4
          ],
          "spanList": [
            89,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            11,
            5
          ],
          "spanList": [
            89,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            11,
            1
          ],
          "spanList": [
            89,
            18,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            11,
            3
          ],
          "spanList": [
            89,
            27,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2
          ],
          "spanList": [
            93,
            0,
            125,
            1
          ],
          "leadingComments": " Describes a message type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            1
          ],
          "spanList": [
            93,
            8,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0
          ],
          "spanList": [
            94,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            4
          ],
          "spanList": [
            94,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            5
          ],
          "spanList": [
            94,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            1
          ],
          "spanList": [
            94,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            3
          ],
          "spanList": [
            94,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1
          ],
          "spanList": [
            96,
            2,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            4
          ],
          "spanList": [
            96,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            6
          ],
          "spanList": [
            96,
            11,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            1
          ],
          "spanList": [
            96,
            32,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            3
          ],
          "spanList": [
            96,
            40,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2
          ],
          "spanList": [
            97,
            2,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            4
          ],
          "spanList": [
            97,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            6
          ],
          "spanList": [
            97,
            11,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            1
          ],
          "spanList": [
            97,
            32,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            2,
            3
          ],
          "spanList": [
            97,
            44,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3
          ],
          "spanList": [
            99,
            2,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            4
          ],
          "spanList": [
            99,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            6
          ],
          "spanList": [
            99,
            11,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            1
          ],
          "spanList": [
            99,
            27,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            3,
            3
          ],
          "spanList": [
            99,
            41,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4
          ],
          "spanList": [
            100,
            2,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            4
          ],
          "spanList": [
            100,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            6
          ],
          "spanList": [
            100,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            1
          ],
          "spanList": [
            100,
            31,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            4,
            3
          ],
          "spanList": [
            100,
            43,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0
          ],
          "spanList": [
            102,
            2,
            107,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            1
          ],
          "spanList": [
            102,
            10,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0
          ],
          "spanList": [
            103,
            4,
            29
          ],
          "trailingComments": " Inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            103,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            103,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            103,
            19,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            103,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1
          ],
          "spanList": [
            104,
            4,
            27
          ],
          "trailingComments": " Exclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            104,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            104,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            104,
            19,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            104,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2
          ],
          "spanList": [
            106,
            4,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            106,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            6
          ],
          "spanList": [
            106,
            13,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            106,
            35,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            106,
            45,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            5
          ],
          "spanList": [
            108,
            2,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            5,
            4
          ],
          "spanList": [
            108,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            5,
            6
          ],
          "spanList": [
            108,
            11,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            5,
            1
          ],
          "spanList": [
            108,
            26,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            5,
            3
          ],
          "spanList": [
            108,
            44,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            6
          ],
          "spanList": [
            110,
            2,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            6,
            4
          ],
          "spanList": [
            110,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            6,
            6
          ],
          "spanList": [
            110,
            11,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            6,
            1
          ],
          "spanList": [
            110,
            32,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            6,
            3
          ],
          "spanList": [
            110,
            45,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            7
          ],
          "spanList": [
            112,
            2,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            7,
            4
          ],
          "spanList": [
            112,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            7,
            6
          ],
          "spanList": [
            112,
            11,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            7,
            1
          ],
          "spanList": [
            112,
            26,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            7,
            3
          ],
          "spanList": [
            112,
            36,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1
          ],
          "spanList": [
            117,
            2,
            120,
            3
          ],
          "leadingComments": " Range of reserved tag numbers. Reserved tag numbers may not be used by\n fields or extension ranges in the same message. Reserved ranges may\n not overlap.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            1
          ],
          "spanList": [
            117,
            10,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            0
          ],
          "spanList": [
            118,
            4,
            29
          ],
          "trailingComments": " Inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            0,
            4
          ],
          "spanList": [
            118,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            0,
            5
          ],
          "spanList": [
            118,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            118,
            19,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            118,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            1
          ],
          "spanList": [
            119,
            4,
            27
          ],
          "trailingComments": " Exclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            1,
            4
          ],
          "spanList": [
            119,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            1,
            5
          ],
          "spanList": [
            119,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            119,
            19,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            1,
            2,
            1,
            3
          ],
          "spanList": [
            119,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            8
          ],
          "spanList": [
            121,
            2,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            8,
            4
          ],
          "spanList": [
            121,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            8,
            6
          ],
          "spanList": [
            121,
            11,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            8,
            1
          ],
          "spanList": [
            121,
            25,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            8,
            3
          ],
          "spanList": [
            121,
            42,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            9
          ],
          "spanList": [
            124,
            2,
            37
          ],
          "leadingComments": " Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            9,
            4
          ],
          "spanList": [
            124,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            9,
            5
          ],
          "spanList": [
            124,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            9,
            1
          ],
          "spanList": [
            124,
            18,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            9,
            3
          ],
          "spanList": [
            124,
            34,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3
          ],
          "spanList": [
            127,
            0,
            133,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            1
          ],
          "spanList": [
            127,
            8,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0
          ],
          "spanList": [
            129,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            4
          ],
          "spanList": [
            129,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            6
          ],
          "spanList": [
            129,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            1
          ],
          "spanList": [
            129,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            2,
            0,
            3
          ],
          "spanList": [
            129,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            5
          ],
          "spanList": [
            132,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            5,
            0
          ],
          "spanList": [
            132,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            5,
            0,
            1
          ],
          "spanList": [
            132,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            3,
            5,
            0,
            2
          ],
          "spanList": [
            132,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4
          ],
          "spanList": [
            136,
            0,
            214,
            1
          ],
          "leadingComments": " Describes a field within a message.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            1
          ],
          "spanList": [
            136,
            8,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0
          ],
          "spanList": [
            137,
            2,
            168,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            1
          ],
          "spanList": [
            137,
            7,
            11
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            0
          ],
          "spanList": [
            140,
            4,
            20
          ],
          "leadingComments": " 0 is reserved for errors.\n Order is weird for historical reasons.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            140,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            140,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            1
          ],
          "spanList": [
            141,
            4,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            141,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            1,
            2
          ],
          "spanList": [
            141,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            2
          ],
          "spanList": [
            144,
            4,
            19
          ],
          "leadingComments": " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            144,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            2,
            2
          ],
          "spanList": [
            144,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            3
          ],
          "spanList": [
            145,
            4,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            145,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            3,
            2
          ],
          "spanList": [
            145,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            4
          ],
          "spanList": [
            148,
            4,
            19
          ],
          "leadingComments": " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            4,
            1
          ],
          "spanList": [
            148,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            4,
            2
          ],
          "spanList": [
            148,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            5
          ],
          "spanList": [
            149,
            4,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            5,
            1
          ],
          "spanList": [
            149,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            5,
            2
          ],
          "spanList": [
            149,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            6
          ],
          "spanList": [
            150,
            4,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            6,
            1
          ],
          "spanList": [
            150,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            6,
            2
          ],
          "spanList": [
            150,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            7
          ],
          "spanList": [
            151,
            4,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            7,
            1
          ],
          "spanList": [
            151,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            7,
            2
          ],
          "spanList": [
            151,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            8
          ],
          "spanList": [
            152,
            4,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            8,
            1
          ],
          "spanList": [
            152,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            8,
            2
          ],
          "spanList": [
            152,
            18,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            9
          ],
          "spanList": [
            157,
            4,
            20
          ],
          "leadingComments": " Tag-delimited aggregate.\n Group type is deprecated and not supported in proto3. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            9,
            1
          ],
          "spanList": [
            157,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            9,
            2
          ],
          "spanList": [
            157,
            17,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            10
          ],
          "spanList": [
            158,
            4,
            22
          ],
          "trailingComments": " Length-delimited aggregate.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            10,
            1
          ],
          "spanList": [
            158,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            10,
            2
          ],
          "spanList": [
            158,
            19,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            11
          ],
          "spanList": [
            161,
            4,
            20
          ],
          "leadingComments": " New in version 2.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            11,
            1
          ],
          "spanList": [
            161,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            11,
            2
          ],
          "spanList": [
            161,
            17,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            12
          ],
          "spanList": [
            162,
            4,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            12,
            1
          ],
          "spanList": [
            162,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            12,
            2
          ],
          "spanList": [
            162,
            18,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            13
          ],
          "spanList": [
            163,
            4,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            13,
            1
          ],
          "spanList": [
            163,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            13,
            2
          ],
          "spanList": [
            163,
            16,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            14
          ],
          "spanList": [
            164,
            4,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            14,
            1
          ],
          "spanList": [
            164,
            4,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            14,
            2
          ],
          "spanList": [
            164,
            20,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            15
          ],
          "spanList": [
            165,
            4,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            15,
            1
          ],
          "spanList": [
            165,
            4,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            15,
            2
          ],
          "spanList": [
            165,
            20,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            16
          ],
          "spanList": [
            166,
            4,
            21
          ],
          "trailingComments": " Uses ZigZag encoding.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            16,
            1
          ],
          "spanList": [
            166,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            16,
            2
          ],
          "spanList": [
            166,
            18,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            17
          ],
          "spanList": [
            167,
            4,
            21
          ],
          "trailingComments": " Uses ZigZag encoding.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            17,
            1
          ],
          "spanList": [
            167,
            4,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            0,
            2,
            17,
            2
          ],
          "spanList": [
            167,
            18,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1
          ],
          "spanList": [
            170,
            2,
            175,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            1
          ],
          "spanList": [
            170,
            7,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            0
          ],
          "spanList": [
            172,
            4,
            23
          ],
          "leadingComments": " 0 is reserved for errors\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            172,
            4,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            0,
            2
          ],
          "spanList": [
            172,
            21,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            1
          ],
          "spanList": [
            173,
            4,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            173,
            4,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            1,
            2
          ],
          "spanList": [
            173,
            21,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            2
          ],
          "spanList": [
            174,
            4,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            174,
            4,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            4,
            1,
            2,
            2,
            2
          ],
          "spanList": [
            174,
            21,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0
          ],
          "spanList": [
            177,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            4
          ],
          "spanList": [
            177,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            5
          ],
          "spanList": [
            177,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            1
          ],
          "spanList": [
            177,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            0,
            3
          ],
          "spanList": [
            177,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1
          ],
          "spanList": [
            178,
            2,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            4
          ],
          "spanList": [
            178,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            5
          ],
          "spanList": [
            178,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            1
          ],
          "spanList": [
            178,
            17,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            1,
            3
          ],
          "spanList": [
            178,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            2
          ],
          "spanList": [
            179,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            2,
            4
          ],
          "spanList": [
            179,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            2,
            6
          ],
          "spanList": [
            179,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            2,
            1
          ],
          "spanList": [
            179,
            17,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            2,
            3
          ],
          "spanList": [
            179,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            3
          ],
          "spanList": [
            183,
            2,
            25
          ],
          "leadingComments": " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            3,
            4
          ],
          "spanList": [
            183,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            3,
            6
          ],
          "spanList": [
            183,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            3,
            1
          ],
          "spanList": [
            183,
            16,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            3,
            3
          ],
          "spanList": [
            183,
            23,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            4
          ],
          "spanList": [
            190,
            2,
            32
          ],
          "leadingComments": " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            4,
            4
          ],
          "spanList": [
            190,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            4,
            5
          ],
          "spanList": [
            190,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            4,
            1
          ],
          "spanList": [
            190,
            18,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            4,
            3
          ],
          "spanList": [
            190,
            30,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            5
          ],
          "spanList": [
            194,
            2,
            31
          ],
          "leadingComments": " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            5,
            4
          ],
          "spanList": [
            194,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            5,
            5
          ],
          "spanList": [
            194,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            5,
            1
          ],
          "spanList": [
            194,
            18,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            5,
            3
          ],
          "spanList": [
            194,
            29,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            6
          ],
          "spanList": [
            201,
            2,
            36
          ],
          "leadingComments": " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            6,
            4
          ],
          "spanList": [
            201,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            6,
            5
          ],
          "spanList": [
            201,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            6,
            1
          ],
          "spanList": [
            201,
            18,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            6,
            3
          ],
          "spanList": [
            201,
            34,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            7
          ],
          "spanList": [
            205,
            2,
            33
          ],
          "leadingComments": " If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            7,
            4
          ],
          "spanList": [
            205,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            7,
            5
          ],
          "spanList": [
            205,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            7,
            1
          ],
          "spanList": [
            205,
            17,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            7,
            3
          ],
          "spanList": [
            205,
            31,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            8
          ],
          "spanList": [
            211,
            2,
            33
          ],
          "leadingComments": " JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            8,
            4
          ],
          "spanList": [
            211,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            8,
            5
          ],
          "spanList": [
            211,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            8,
            1
          ],
          "spanList": [
            211,
            18,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            8,
            3
          ],
          "spanList": [
            211,
            30,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            9
          ],
          "spanList": [
            213,
            2,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            9,
            4
          ],
          "spanList": [
            213,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            9,
            6
          ],
          "spanList": [
            213,
            11,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            9,
            1
          ],
          "spanList": [
            213,
            24,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            4,
            2,
            9,
            3
          ],
          "spanList": [
            213,
            34,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5
          ],
          "spanList": [
            217,
            0,
            220,
            1
          ],
          "leadingComments": " Describes a oneof.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            1
          ],
          "spanList": [
            217,
            8,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0
          ],
          "spanList": [
            218,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            4
          ],
          "spanList": [
            218,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            5
          ],
          "spanList": [
            218,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            1
          ],
          "spanList": [
            218,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            0,
            3
          ],
          "spanList": [
            218,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            1
          ],
          "spanList": [
            219,
            2,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            1,
            4
          ],
          "spanList": [
            219,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            1,
            6
          ],
          "spanList": [
            219,
            11,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            1,
            1
          ],
          "spanList": [
            219,
            24,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            5,
            2,
            1,
            3
          ],
          "spanList": [
            219,
            34,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6
          ],
          "spanList": [
            223,
            0,
            249,
            1
          ],
          "leadingComments": " Describes an enum type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            1
          ],
          "spanList": [
            223,
            8,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0
          ],
          "spanList": [
            224,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            4
          ],
          "spanList": [
            224,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            5
          ],
          "spanList": [
            224,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            1
          ],
          "spanList": [
            224,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            0,
            3
          ],
          "spanList": [
            224,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            1
          ],
          "spanList": [
            226,
            2,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            1,
            4
          ],
          "spanList": [
            226,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            1,
            6
          ],
          "spanList": [
            226,
            11,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            1,
            1
          ],
          "spanList": [
            226,
            36,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            1,
            3
          ],
          "spanList": [
            226,
            44,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            2
          ],
          "spanList": [
            228,
            2,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            2,
            4
          ],
          "spanList": [
            228,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            2,
            6
          ],
          "spanList": [
            228,
            11,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            2,
            1
          ],
          "spanList": [
            228,
            23,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            2,
            3
          ],
          "spanList": [
            228,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0
          ],
          "spanList": [
            236,
            2,
            239,
            3
          ],
          "leadingComments": " Range of reserved numeric values. Reserved values may not be used by\n entries in the same enum. Reserved ranges may not overlap.\n\n Note that this is distinct from DescriptorProto.ReservedRange in that it\n is inclusive such that it can appropriately represent the entire int32\n domain.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            1
          ],
          "spanList": [
            236,
            10,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            0
          ],
          "spanList": [
            237,
            4,
            29
          ],
          "trailingComments": " Inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            237,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            237,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            237,
            19,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            237,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            1
          ],
          "spanList": [
            238,
            4,
            27
          ],
          "trailingComments": " Inclusive.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            238,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            238,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            238,
            19,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            3,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            238,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            3
          ],
          "spanList": [
            244,
            2,
            48
          ],
          "leadingComments": " Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            3,
            4
          ],
          "spanList": [
            244,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            3,
            6
          ],
          "spanList": [
            244,
            11,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            3,
            1
          ],
          "spanList": [
            244,
            29,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            3,
            3
          ],
          "spanList": [
            244,
            46,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            4
          ],
          "spanList": [
            248,
            2,
            36
          ],
          "leadingComments": " Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            4,
            4
          ],
          "spanList": [
            248,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            4,
            5
          ],
          "spanList": [
            248,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            4,
            1
          ],
          "spanList": [
            248,
            18,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            6,
            2,
            4,
            3
          ],
          "spanList": [
            248,
            34,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7
          ],
          "spanList": [
            252,
            0,
            257,
            1
          ],
          "leadingComments": " Describes a value within an enum.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            1
          ],
          "spanList": [
            252,
            8,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0
          ],
          "spanList": [
            253,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            4
          ],
          "spanList": [
            253,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            5
          ],
          "spanList": [
            253,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            1
          ],
          "spanList": [
            253,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            0,
            3
          ],
          "spanList": [
            253,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            1
          ],
          "spanList": [
            254,
            2,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            1,
            4
          ],
          "spanList": [
            254,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            1,
            5
          ],
          "spanList": [
            254,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            1,
            1
          ],
          "spanList": [
            254,
            17,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            1,
            3
          ],
          "spanList": [
            254,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            2
          ],
          "spanList": [
            256,
            2,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            2,
            4
          ],
          "spanList": [
            256,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            2,
            6
          ],
          "spanList": [
            256,
            11,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            2,
            1
          ],
          "spanList": [
            256,
            28,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            7,
            2,
            2,
            3
          ],
          "spanList": [
            256,
            38,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8
          ],
          "spanList": [
            260,
            0,
            265,
            1
          ],
          "leadingComments": " Describes a service.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            1
          ],
          "spanList": [
            260,
            8,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0
          ],
          "spanList": [
            261,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            4
          ],
          "spanList": [
            261,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            5
          ],
          "spanList": [
            261,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            1
          ],
          "spanList": [
            261,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            0,
            3
          ],
          "spanList": [
            261,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            1
          ],
          "spanList": [
            262,
            2,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            1,
            4
          ],
          "spanList": [
            262,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            1,
            6
          ],
          "spanList": [
            262,
            11,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            1,
            1
          ],
          "spanList": [
            262,
            33,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            1,
            3
          ],
          "spanList": [
            262,
            42,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            2
          ],
          "spanList": [
            264,
            2,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            2,
            4
          ],
          "spanList": [
            264,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            2,
            6
          ],
          "spanList": [
            264,
            11,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            2,
            1
          ],
          "spanList": [
            264,
            26,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            8,
            2,
            2,
            3
          ],
          "spanList": [
            264,
            36,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9
          ],
          "spanList": [
            268,
            0,
            282,
            1
          ],
          "leadingComments": " Describes a method of a service.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            1
          ],
          "spanList": [
            268,
            8,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            0
          ],
          "spanList": [
            269,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            0,
            4
          ],
          "spanList": [
            269,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            0,
            5
          ],
          "spanList": [
            269,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            0,
            1
          ],
          "spanList": [
            269,
            18,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            0,
            3
          ],
          "spanList": [
            269,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            1
          ],
          "spanList": [
            273,
            2,
            33
          ],
          "leadingComments": " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            1,
            4
          ],
          "spanList": [
            273,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            1,
            5
          ],
          "spanList": [
            273,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            1,
            1
          ],
          "spanList": [
            273,
            18,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            1,
            3
          ],
          "spanList": [
            273,
            31,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            2
          ],
          "spanList": [
            274,
            2,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            2,
            4
          ],
          "spanList": [
            274,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            2,
            5
          ],
          "spanList": [
            274,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            2,
            1
          ],
          "spanList": [
            274,
            18,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            2,
            3
          ],
          "spanList": [
            274,
            32,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            3
          ],
          "spanList": [
            276,
            2,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            3,
            4
          ],
          "spanList": [
            276,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            3,
            6
          ],
          "spanList": [
            276,
            11,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            3,
            1
          ],
          "spanList": [
            276,
            25,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            3,
            3
          ],
          "spanList": [
            276,
            35,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4
          ],
          "spanList": [
            279,
            2,
            55
          ],
          "leadingComments": " Identifies if client streams multiple client messages\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4,
            4
          ],
          "spanList": [
            279,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4,
            5
          ],
          "spanList": [
            279,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4,
            1
          ],
          "spanList": [
            279,
            16,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4,
            3
          ],
          "spanList": [
            279,
            35,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4,
            8
          ],
          "spanList": [
            279,
            37,
            54
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            4,
            7
          ],
          "spanList": [
            279,
            48,
            53
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5
          ],
          "spanList": [
            281,
            2,
            55
          ],
          "leadingComments": " Identifies if server streams multiple server messages\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5,
            4
          ],
          "spanList": [
            281,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5,
            5
          ],
          "spanList": [
            281,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5,
            1
          ],
          "spanList": [
            281,
            16,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5,
            3
          ],
          "spanList": [
            281,
            35,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5,
            8
          ],
          "spanList": [
            281,
            37,
            54
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            9,
            2,
            5,
            7
          ],
          "spanList": [
            281,
            48,
            53
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10
          ],
          "spanList": [
            317,
            0,
            440,
            1
          ],
          "leadingDetachedCommentsList": [
            " ===================================================================\n Options\n",
            " Each of the definitions above may have \"options\" attached.  These are\n just annotations which may cause code to be generated slightly differently\n or may contain hints for code that manipulates protocol messages.\n\n Clients may define custom options as extensions of the *Options messages.\n These extensions may not yet be known at parsing time, so the parser cannot\n store the values in them.  Instead it stores them in a field in the *Options\n message called uninterpreted_option. This field must have the same name\n across all *Options messages. We then use this field to populate the\n extensions when we build a descriptor, at which point all protos have been\n parsed and so all extensions are known.\n\n Extension numbers for custom options may be chosen as follows:\n * For options which will only be used within a single application or\n   organization, or for experimental options, use field numbers 50000\n   through 99999.  It is up to you to ensure that you do not use the\n   same number for multiple options.\n * For options which will be published and used publicly by multiple\n   independent entities, e-mail protobuf-global-extension-registry@google.com\n   to reserve extension numbers. Simply provide your project name (e.g.\n   Objective-C plugin) and your project website (if available) -- there's no\n   need to explain how you intend to use them. Usually you only need one\n   extension number. You can declare multiple options with only one extension\n   number by putting them in a sub-message. See the Custom Options section of\n   the docs for examples:\n   https://developers.google.com/protocol-buffers/docs/proto#options\n   If this turns out to be popular, a web service will be set up\n   to automatically assign option numbers.\n"
          ]
        },
        {
          "pathList": [
            4,
            10,
            1
          ],
          "spanList": [
            317,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            0
          ],
          "spanList": [
            323,
            2,
            35
          ],
          "leadingComments": " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            0,
            4
          ],
          "spanList": [
            323,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            0,
            5
          ],
          "spanList": [
            323,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            0,
            1
          ],
          "spanList": [
            323,
            18,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            0,
            3
          ],
          "spanList": [
            323,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            1
          ],
          "spanList": [
            331,
            2,
            43
          ],
          "leadingComments": " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            1,
            4
          ],
          "spanList": [
            331,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            1,
            5
          ],
          "spanList": [
            331,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            1,
            1
          ],
          "spanList": [
            331,
            18,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            1,
            3
          ],
          "spanList": [
            331,
            41,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2
          ],
          "spanList": [
            339,
            2,
            59
          ],
          "leadingComments": " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2,
            4
          ],
          "spanList": [
            339,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2,
            5
          ],
          "spanList": [
            339,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2,
            1
          ],
          "spanList": [
            339,
            16,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2,
            3
          ],
          "spanList": [
            339,
            38,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2,
            8
          ],
          "spanList": [
            339,
            41,
            58
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            2,
            7
          ],
          "spanList": [
            339,
            52,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3
          ],
          "spanList": [
            342,
            2,
            69
          ],
          "leadingComments": " This option does nothing.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3,
            4
          ],
          "spanList": [
            342,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3,
            5
          ],
          "spanList": [
            342,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3,
            1
          ],
          "spanList": [
            342,
            16,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3,
            3
          ],
          "spanList": [
            342,
            48,
            50
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3,
            8
          ],
          "spanList": [
            342,
            51,
            68
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            3,
            8,
            3
          ],
          "spanList": [
            342,
            52,
            67
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4
          ],
          "spanList": [
            350,
            2,
            62
          ],
          "leadingComments": " If set true, then the Java2 code generator will generate code that\n throws an exception whenever an attempt is made to assign a non-UTF-8\n byte sequence to a string field.\n Message reflection will do the same.\n However, an extension field still accepts non-UTF-8 byte sequences.\n This option has no effect on when used with the lite runtime.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4,
            4
          ],
          "spanList": [
            350,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4,
            5
          ],
          "spanList": [
            350,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4,
            1
          ],
          "spanList": [
            350,
            16,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4,
            3
          ],
          "spanList": [
            350,
            41,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4,
            8
          ],
          "spanList": [
            350,
            44,
            61
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            4,
            7
          ],
          "spanList": [
            350,
            55,
            60
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0
          ],
          "spanList": [
            354,
            2,
            359,
            3
          ],
          "leadingComments": " Generated classes can be optimized for speed or code size.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            1
          ],
          "spanList": [
            354,
            7,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            0
          ],
          "spanList": [
            355,
            4,
            14
          ],
          "trailingComments": " Generate complete code for parsing, serialization,\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            355,
            4,
            9
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            355,
            12,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            1
          ],
          "spanList": [
            357,
            4,
            18
          ],
          "leadingComments": " etc.\n",
          "trailingComments": " Use ReflectionOps to implement these methods.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            357,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            1,
            2
          ],
          "spanList": [
            357,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            2
          ],
          "spanList": [
            358,
            4,
            21
          ],
          "trailingComments": " Generate code using MessageLite and the lite runtime.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            358,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            4,
            0,
            2,
            2,
            2
          ],
          "spanList": [
            358,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5
          ],
          "spanList": [
            360,
            2,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5,
            4
          ],
          "spanList": [
            360,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5,
            6
          ],
          "spanList": [
            360,
            11,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5,
            1
          ],
          "spanList": [
            360,
            24,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5,
            3
          ],
          "spanList": [
            360,
            39,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5,
            8
          ],
          "spanList": [
            360,
            41,
            58
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            5,
            7
          ],
          "spanList": [
            360,
            52,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            6
          ],
          "spanList": [
            367,
            2,
            34
          ],
          "leadingComments": " Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            6,
            4
          ],
          "spanList": [
            367,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            6,
            5
          ],
          "spanList": [
            367,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            6,
            1
          ],
          "spanList": [
            367,
            18,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            6,
            3
          ],
          "spanList": [
            367,
            31,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7
          ],
          "spanList": [
            382,
            2,
            59
          ],
          "leadingComments": " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7,
            4
          ],
          "spanList": [
            382,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7,
            5
          ],
          "spanList": [
            382,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7,
            1
          ],
          "spanList": [
            382,
            16,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7,
            3
          ],
          "spanList": [
            382,
            38,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7,
            8
          ],
          "spanList": [
            382,
            41,
            58
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            7,
            7
          ],
          "spanList": [
            382,
            52,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8
          ],
          "spanList": [
            383,
            2,
            61
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8,
            4
          ],
          "spanList": [
            383,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8,
            5
          ],
          "spanList": [
            383,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8,
            1
          ],
          "spanList": [
            383,
            16,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8,
            3
          ],
          "spanList": [
            383,
            40,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8,
            8
          ],
          "spanList": [
            383,
            43,
            60
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            8,
            7
          ],
          "spanList": [
            383,
            54,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9
          ],
          "spanList": [
            384,
            2,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9,
            4
          ],
          "spanList": [
            384,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9,
            5
          ],
          "spanList": [
            384,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9,
            1
          ],
          "spanList": [
            384,
            16,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9,
            3
          ],
          "spanList": [
            384,
            38,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9,
            8
          ],
          "spanList": [
            384,
            41,
            58
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            9,
            7
          ],
          "spanList": [
            384,
            52,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10
          ],
          "spanList": [
            385,
            2,
            60
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10,
            4
          ],
          "spanList": [
            385,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10,
            5
          ],
          "spanList": [
            385,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10,
            1
          ],
          "spanList": [
            385,
            16,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10,
            3
          ],
          "spanList": [
            385,
            39,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10,
            8
          ],
          "spanList": [
            385,
            42,
            59
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            10,
            7
          ],
          "spanList": [
            385,
            53,
            58
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11
          ],
          "spanList": [
            391,
            2,
            50
          ],
          "leadingComments": " Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11,
            4
          ],
          "spanList": [
            391,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11,
            5
          ],
          "spanList": [
            391,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11,
            1
          ],
          "spanList": [
            391,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11,
            3
          ],
          "spanList": [
            391,
            29,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11,
            8
          ],
          "spanList": [
            391,
            32,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            11,
            7
          ],
          "spanList": [
            391,
            43,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12
          ],
          "spanList": [
            395,
            2,
            56
          ],
          "leadingComments": " Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12,
            4
          ],
          "spanList": [
            395,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12,
            5
          ],
          "spanList": [
            395,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12,
            1
          ],
          "spanList": [
            395,
            16,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12,
            3
          ],
          "spanList": [
            395,
            35,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12,
            8
          ],
          "spanList": [
            395,
            38,
            55
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            12,
            7
          ],
          "spanList": [
            395,
            49,
            54
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            13
          ],
          "spanList": [
            400,
            2,
            41
          ],
          "leadingComments": " Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            13,
            4
          ],
          "spanList": [
            400,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            13,
            5
          ],
          "spanList": [
            400,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            13,
            1
          ],
          "spanList": [
            400,
            18,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            13,
            3
          ],
          "spanList": [
            400,
            38,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            14
          ],
          "spanList": [
            403,
            2,
            40
          ],
          "leadingComments": " Namespace for generated classes; defaults to the package.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            14,
            4
          ],
          "spanList": [
            403,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            14,
            5
          ],
          "spanList": [
            403,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            14,
            1
          ],
          "spanList": [
            403,
            18,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            14,
            3
          ],
          "spanList": [
            403,
            37,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            15
          ],
          "spanList": [
            409,
            2,
            36
          ],
          "leadingComments": " By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            15,
            4
          ],
          "spanList": [
            409,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            15,
            5
          ],
          "spanList": [
            409,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            15,
            1
          ],
          "spanList": [
            409,
            18,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            15,
            3
          ],
          "spanList": [
            409,
            33,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            16
          ],
          "spanList": [
            413,
            2,
            40
          ],
          "leadingComments": " Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            16,
            4
          ],
          "spanList": [
            413,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            16,
            5
          ],
          "spanList": [
            413,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            16,
            1
          ],
          "spanList": [
            413,
            18,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            16,
            3
          ],
          "spanList": [
            413,
            37,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            17
          ],
          "spanList": [
            418,
            2,
            37
          ],
          "leadingComments": " Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            17,
            4
          ],
          "spanList": [
            418,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            17,
            5
          ],
          "spanList": [
            418,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            17,
            1
          ],
          "spanList": [
            418,
            18,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            17,
            3
          ],
          "spanList": [
            418,
            34,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            18
          ],
          "spanList": [
            423,
            2,
            46
          ],
          "leadingComments": " Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            18,
            4
          ],
          "spanList": [
            423,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            18,
            5
          ],
          "spanList": [
            423,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            18,
            1
          ],
          "spanList": [
            423,
            18,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            18,
            3
          ],
          "spanList": [
            423,
            43,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            19
          ],
          "spanList": [
            428,
            2,
            36
          ],
          "leadingComments": " Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            19,
            4
          ],
          "spanList": [
            428,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            19,
            5
          ],
          "spanList": [
            428,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            19,
            1
          ],
          "spanList": [
            428,
            18,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            19,
            3
          ],
          "spanList": [
            428,
            33,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            20
          ],
          "spanList": [
            433,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            20,
            4
          ],
          "spanList": [
            433,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            20,
            6
          ],
          "spanList": [
            433,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            20,
            1
          ],
          "spanList": [
            433,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            2,
            20,
            3
          ],
          "spanList": [
            433,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            5
          ],
          "spanList": [
            437,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message.\n See the documentation for the \"Options\" section above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            5,
            0
          ],
          "spanList": [
            437,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            5,
            0,
            1
          ],
          "spanList": [
            437,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            5,
            0,
            2
          ],
          "spanList": [
            437,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            9
          ],
          "spanList": [
            439,
            2,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            9,
            0
          ],
          "spanList": [
            439,
            11,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            9,
            0,
            1
          ],
          "spanList": [
            439,
            11,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            10,
            9,
            0,
            2
          ],
          "spanList": [
            439,
            11,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11
          ],
          "spanList": [
            442,
            0,
            506,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            1
          ],
          "spanList": [
            442,
            8,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0
          ],
          "spanList": [
            461,
            2,
            62
          ],
          "leadingComments": " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0,
            4
          ],
          "spanList": [
            461,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0,
            5
          ],
          "spanList": [
            461,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0,
            1
          ],
          "spanList": [
            461,
            16,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0,
            3
          ],
          "spanList": [
            461,
            42,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0,
            8
          ],
          "spanList": [
            461,
            44,
            61
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            0,
            7
          ],
          "spanList": [
            461,
            55,
            60
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1
          ],
          "spanList": [
            466,
            2,
            70
          ],
          "leadingComments": " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1,
            4
          ],
          "spanList": [
            466,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1,
            5
          ],
          "spanList": [
            466,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1,
            1
          ],
          "spanList": [
            466,
            16,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1,
            3
          ],
          "spanList": [
            466,
            50,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1,
            8
          ],
          "spanList": [
            466,
            52,
            69
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            1,
            7
          ],
          "spanList": [
            466,
            63,
            68
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2
          ],
          "spanList": [
            472,
            2,
            49
          ],
          "leadingComments": " Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2,
            4
          ],
          "spanList": [
            472,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2,
            5
          ],
          "spanList": [
            472,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2,
            1
          ],
          "spanList": [
            472,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2,
            3
          ],
          "spanList": [
            472,
            29,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2,
            8
          ],
          "spanList": [
            472,
            31,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            2,
            7
          ],
          "spanList": [
            472,
            42,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            3
          ],
          "spanList": [
            495,
            2,
            30
          ],
          "leadingComments": " Whether the message is an automatically generated map entry type for the\n maps field.\n\n For maps fields:\n     map<KeyType, ValueType> map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementations still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            3,
            4
          ],
          "spanList": [
            495,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            3,
            5
          ],
          "spanList": [
            495,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            3,
            1
          ],
          "spanList": [
            495,
            16,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            3,
            3
          ],
          "spanList": [
            495,
            28,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9
          ],
          "spanList": [
            497,
            2,
            13
          ],
          "trailingComments": " javalite_serializable\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9,
            0
          ],
          "spanList": [
            497,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9,
            0,
            1
          ],
          "spanList": [
            497,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9,
            0,
            2
          ],
          "spanList": [
            497,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9
          ],
          "spanList": [
            498,
            2,
            13
          ],
          "trailingComments": " javanano_as_lite\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9,
            1
          ],
          "spanList": [
            498,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9,
            1,
            1
          ],
          "spanList": [
            498,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            9,
            1,
            2
          ],
          "spanList": [
            498,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            4
          ],
          "spanList": [
            502,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            4,
            4
          ],
          "spanList": [
            502,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            4,
            6
          ],
          "spanList": [
            502,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            4,
            1
          ],
          "spanList": [
            502,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            2,
            4,
            3
          ],
          "spanList": [
            502,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            5
          ],
          "spanList": [
            505,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            5,
            0
          ],
          "spanList": [
            505,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            5,
            0,
            1
          ],
          "spanList": [
            505,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            11,
            5,
            0,
            2
          ],
          "spanList": [
            505,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12
          ],
          "spanList": [
            508,
            0,
            599,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            1
          ],
          "spanList": [
            508,
            8,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0
          ],
          "spanList": [
            513,
            2,
            46
          ],
          "leadingComments": " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0,
            4
          ],
          "spanList": [
            513,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0,
            6
          ],
          "spanList": [
            513,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0,
            1
          ],
          "spanList": [
            513,
            17,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0,
            3
          ],
          "spanList": [
            513,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0,
            8
          ],
          "spanList": [
            513,
            27,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            0,
            7
          ],
          "spanList": [
            513,
            38,
            44
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0
          ],
          "spanList": [
            514,
            2,
            521,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            1
          ],
          "spanList": [
            514,
            7,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            0
          ],
          "spanList": [
            516,
            4,
            15
          ],
          "leadingComments": " Default mode.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            516,
            4,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            516,
            13,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            1
          ],
          "spanList": [
            518,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            518,
            4,
            8
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            1,
            2
          ],
          "spanList": [
            518,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            2
          ],
          "spanList": [
            520,
            4,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            520,
            4,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            0,
            2,
            2,
            2
          ],
          "spanList": [
            520,
            19,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            1
          ],
          "spanList": [
            527,
            2,
            27
          ],
          "leadingComments": " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            1,
            4
          ],
          "spanList": [
            527,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            1,
            5
          ],
          "spanList": [
            527,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            1,
            1
          ],
          "spanList": [
            527,
            16,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            1,
            3
          ],
          "spanList": [
            527,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2
          ],
          "spanList": [
            540,
            2,
            51
          ],
          "leadingComments": " The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.\n\n This option is an enum to permit additional types to be added, e.g.\n goog.math.Integer.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2,
            4
          ],
          "spanList": [
            540,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2,
            6
          ],
          "spanList": [
            540,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2,
            1
          ],
          "spanList": [
            540,
            18,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2,
            3
          ],
          "spanList": [
            540,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2,
            8
          ],
          "spanList": [
            540,
            29,
            50
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            2,
            7
          ],
          "spanList": [
            540,
            40,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1
          ],
          "spanList": [
            541,
            2,
            550,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            1
          ],
          "spanList": [
            541,
            7,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            0
          ],
          "spanList": [
            543,
            4,
            18
          ],
          "leadingComments": " Use the default type.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            543,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            0,
            2
          ],
          "spanList": [
            543,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            1
          ],
          "spanList": [
            546,
            4,
            18
          ],
          "leadingComments": " Use JavaScript strings.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            546,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            1,
            2
          ],
          "spanList": [
            546,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            2
          ],
          "spanList": [
            549,
            4,
            18
          ],
          "leadingComments": " Use JavaScript numbers.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            549,
            4,
            13
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            4,
            1,
            2,
            2,
            2
          ],
          "spanList": [
            549,
            16,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3
          ],
          "spanList": [
            580,
            2,
            43
          ],
          "leadingComments": " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outer message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3,
            4
          ],
          "spanList": [
            580,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3,
            5
          ],
          "spanList": [
            580,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3,
            1
          ],
          "spanList": [
            580,
            16,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3,
            3
          ],
          "spanList": [
            580,
            23,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3,
            8
          ],
          "spanList": [
            580,
            25,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            3,
            7
          ],
          "spanList": [
            580,
            36,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4
          ],
          "spanList": [
            586,
            2,
            49
          ],
          "leadingComments": " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4,
            4
          ],
          "spanList": [
            586,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4,
            5
          ],
          "spanList": [
            586,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4,
            1
          ],
          "spanList": [
            586,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4,
            3
          ],
          "spanList": [
            586,
            29,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4,
            8
          ],
          "spanList": [
            586,
            31,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            4,
            7
          ],
          "spanList": [
            586,
            42,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5
          ],
          "spanList": [
            589,
            2,
            44
          ],
          "leadingComments": " For Google-internal migration only. Do not use.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5,
            4
          ],
          "spanList": [
            589,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5,
            5
          ],
          "spanList": [
            589,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5,
            1
          ],
          "spanList": [
            589,
            16,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5,
            3
          ],
          "spanList": [
            589,
            23,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5,
            8
          ],
          "spanList": [
            589,
            26,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            5,
            7
          ],
          "spanList": [
            589,
            37,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            6
          ],
          "spanList": [
            593,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            6,
            4
          ],
          "spanList": [
            593,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            6,
            6
          ],
          "spanList": [
            593,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            6,
            1
          ],
          "spanList": [
            593,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            2,
            6,
            3
          ],
          "spanList": [
            593,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            5
          ],
          "spanList": [
            596,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            5,
            0
          ],
          "spanList": [
            596,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            5,
            0,
            1
          ],
          "spanList": [
            596,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            5,
            0,
            2
          ],
          "spanList": [
            596,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            9
          ],
          "spanList": [
            598,
            2,
            13
          ],
          "trailingComments": " removed jtype\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            9,
            0
          ],
          "spanList": [
            598,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            9,
            0,
            1
          ],
          "spanList": [
            598,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            12,
            9,
            0,
            2
          ],
          "spanList": [
            598,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13
          ],
          "spanList": [
            601,
            0,
            607,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            1
          ],
          "spanList": [
            601,
            8,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            2,
            0
          ],
          "spanList": [
            603,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            2,
            0,
            4
          ],
          "spanList": [
            603,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            2,
            0,
            6
          ],
          "spanList": [
            603,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            2,
            0,
            1
          ],
          "spanList": [
            603,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            2,
            0,
            3
          ],
          "spanList": [
            603,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            5
          ],
          "spanList": [
            606,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            5,
            0
          ],
          "spanList": [
            606,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            5,
            0,
            1
          ],
          "spanList": [
            606,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            13,
            5,
            0,
            2
          ],
          "spanList": [
            606,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14
          ],
          "spanList": [
            609,
            0,
            628,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            1
          ],
          "spanList": [
            609,
            8,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            0
          ],
          "spanList": [
            613,
            2,
            32
          ],
          "leadingComments": " Set this option to true to allow mapping different tag names to the same\n value.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            0,
            4
          ],
          "spanList": [
            613,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            0,
            5
          ],
          "spanList": [
            613,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            0,
            1
          ],
          "spanList": [
            613,
            16,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            0,
            3
          ],
          "spanList": [
            613,
            30,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1
          ],
          "spanList": [
            619,
            2,
            49
          ],
          "leadingComments": " Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1,
            4
          ],
          "spanList": [
            619,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1,
            5
          ],
          "spanList": [
            619,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1,
            1
          ],
          "spanList": [
            619,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1,
            3
          ],
          "spanList": [
            619,
            29,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1,
            8
          ],
          "spanList": [
            619,
            31,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            1,
            7
          ],
          "spanList": [
            619,
            42,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            9
          ],
          "spanList": [
            621,
            2,
            13
          ],
          "trailingComments": " javanano_as_lite\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            9,
            0
          ],
          "spanList": [
            621,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            9,
            0,
            1
          ],
          "spanList": [
            621,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            9,
            0,
            2
          ],
          "spanList": [
            621,
            11,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            2
          ],
          "spanList": [
            624,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            2,
            4
          ],
          "spanList": [
            624,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            2,
            6
          ],
          "spanList": [
            624,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            2,
            1
          ],
          "spanList": [
            624,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            2,
            2,
            3
          ],
          "spanList": [
            624,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            5
          ],
          "spanList": [
            627,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            5,
            0
          ],
          "spanList": [
            627,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            5,
            0,
            1
          ],
          "spanList": [
            627,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            14,
            5,
            0,
            2
          ],
          "spanList": [
            627,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15
          ],
          "spanList": [
            630,
            0,
            642,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            1
          ],
          "spanList": [
            630,
            8,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0
          ],
          "spanList": [
            635,
            2,
            49
          ],
          "leadingComments": " Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0,
            4
          ],
          "spanList": [
            635,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0,
            5
          ],
          "spanList": [
            635,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0,
            1
          ],
          "spanList": [
            635,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0,
            3
          ],
          "spanList": [
            635,
            29,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0,
            8
          ],
          "spanList": [
            635,
            31,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            0,
            7
          ],
          "spanList": [
            635,
            42,
            47
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            1
          ],
          "spanList": [
            638,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            1,
            4
          ],
          "spanList": [
            638,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            1,
            6
          ],
          "spanList": [
            638,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            1,
            1
          ],
          "spanList": [
            638,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            2,
            1,
            3
          ],
          "spanList": [
            638,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            5
          ],
          "spanList": [
            641,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            5,
            0
          ],
          "spanList": [
            641,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            5,
            0,
            1
          ],
          "spanList": [
            641,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            15,
            5,
            0,
            2
          ],
          "spanList": [
            641,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16
          ],
          "spanList": [
            644,
            0,
            662,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            1
          ],
          "spanList": [
            644,
            8,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            0
          ],
          "spanList": [
            655,
            2,
            50
          ],
          "leadingComments": " Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n",
          "leadingDetachedCommentsList": [
            " Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"
          ]
        },
        {
          "pathList": [
            4,
            16,
            2,
            0,
            4
          ],
          "spanList": [
            655,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            0,
            5
          ],
          "spanList": [
            655,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            0,
            1
          ],
          "spanList": [
            655,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            0,
            3
          ],
          "spanList": [
            655,
            29,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            0,
            8
          ],
          "spanList": [
            655,
            32,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            0,
            7
          ],
          "spanList": [
            655,
            43,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            1
          ],
          "spanList": [
            658,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            1,
            4
          ],
          "spanList": [
            658,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            1,
            6
          ],
          "spanList": [
            658,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            1,
            1
          ],
          "spanList": [
            658,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            2,
            1,
            3
          ],
          "spanList": [
            658,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            5
          ],
          "spanList": [
            661,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            5,
            0
          ],
          "spanList": [
            661,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            5,
            0,
            1
          ],
          "spanList": [
            661,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            16,
            5,
            0,
            2
          ],
          "spanList": [
            661,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17
          ],
          "spanList": [
            664,
            0,
            693,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            1
          ],
          "spanList": [
            664,
            8,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            0
          ],
          "spanList": [
            675,
            2,
            50
          ],
          "leadingComments": " Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n",
          "leadingDetachedCommentsList": [
            " Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"
          ]
        },
        {
          "pathList": [
            4,
            17,
            2,
            0,
            4
          ],
          "spanList": [
            675,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            0,
            5
          ],
          "spanList": [
            675,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            0,
            1
          ],
          "spanList": [
            675,
            16,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            0,
            3
          ],
          "spanList": [
            675,
            29,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            0,
            8
          ],
          "spanList": [
            675,
            32,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            0,
            7
          ],
          "spanList": [
            675,
            43,
            48
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0
          ],
          "spanList": [
            680,
            2,
            684,
            3
          ],
          "leadingComments": " Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n or neither? HTTP based RPC implementation may choose GET verb for safe\n methods, and PUT verb for idempotent methods instead of the default POST.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            1
          ],
          "spanList": [
            680,
            7,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            0
          ],
          "spanList": [
            681,
            4,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            681,
            4,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            0,
            2
          ],
          "spanList": [
            681,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            1
          ],
          "spanList": [
            682,
            4,
            24
          ],
          "trailingComments": " implies idempotent\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            682,
            4,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            1,
            2
          ],
          "spanList": [
            682,
            22,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            2
          ],
          "spanList": [
            683,
            4,
            19
          ],
          "trailingComments": " idempotent, but may have side effects\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            683,
            4,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            4,
            0,
            2,
            2,
            2
          ],
          "spanList": [
            683,
            17,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1
          ],
          "spanList": [
            685,
            2,
            686,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1,
            4
          ],
          "spanList": [
            685,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1,
            6
          ],
          "spanList": [
            685,
            11,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1,
            1
          ],
          "spanList": [
            685,
            28,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1,
            3
          ],
          "spanList": [
            685,
            48,
            50
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1,
            8
          ],
          "spanList": [
            686,
            6,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            1,
            7
          ],
          "spanList": [
            686,
            17,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            2
          ],
          "spanList": [
            689,
            2,
            58
          ],
          "leadingComments": " The parser stores options it doesn't recognize here. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            2,
            4
          ],
          "spanList": [
            689,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            2,
            6
          ],
          "spanList": [
            689,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            2,
            1
          ],
          "spanList": [
            689,
            31,
            51
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            2,
            2,
            3
          ],
          "spanList": [
            689,
            54,
            57
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            5
          ],
          "spanList": [
            692,
            2,
            25
          ],
          "leadingComments": " Clients can define custom options in extensions of this message. See above.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            5,
            0
          ],
          "spanList": [
            692,
            13,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            5,
            0,
            1
          ],
          "spanList": [
            692,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            17,
            5,
            0,
            2
          ],
          "spanList": [
            692,
            21,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18
          ],
          "spanList": [
            702,
            0,
            722,
            1
          ],
          "leadingComments": " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            1
          ],
          "spanList": [
            702,
            8,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0
          ],
          "spanList": [
            708,
            2,
            711,
            3
          ],
          "leadingComments": " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            1
          ],
          "spanList": [
            708,
            10,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            0
          ],
          "spanList": [
            709,
            4,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            709,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            709,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            709,
            20,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            709,
            32,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            1
          ],
          "spanList": [
            710,
            4,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            710,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            710,
            13,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            710,
            18,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            3,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            710,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            0
          ],
          "spanList": [
            712,
            2,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            0,
            4
          ],
          "spanList": [
            712,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            0,
            6
          ],
          "spanList": [
            712,
            11,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            0,
            1
          ],
          "spanList": [
            712,
            20,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            0,
            3
          ],
          "spanList": [
            712,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            1
          ],
          "spanList": [
            716,
            2,
            39
          ],
          "leadingComments": " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            1,
            4
          ],
          "spanList": [
            716,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            1,
            5
          ],
          "spanList": [
            716,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            1,
            1
          ],
          "spanList": [
            716,
            18,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            1,
            3
          ],
          "spanList": [
            716,
            37,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            2
          ],
          "spanList": [
            717,
            2,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            2,
            4
          ],
          "spanList": [
            717,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            2,
            5
          ],
          "spanList": [
            717,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            2,
            1
          ],
          "spanList": [
            717,
            18,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            2,
            3
          ],
          "spanList": [
            717,
            39,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            3
          ],
          "spanList": [
            718,
            2,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            3,
            4
          ],
          "spanList": [
            718,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            3,
            5
          ],
          "spanList": [
            718,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            3,
            1
          ],
          "spanList": [
            718,
            17,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            3,
            3
          ],
          "spanList": [
            718,
            38,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            4
          ],
          "spanList": [
            719,
            2,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            4,
            4
          ],
          "spanList": [
            719,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            4,
            5
          ],
          "spanList": [
            719,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            4,
            1
          ],
          "spanList": [
            719,
            18,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            4,
            3
          ],
          "spanList": [
            719,
            33,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            5
          ],
          "spanList": [
            720,
            2,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            5,
            4
          ],
          "spanList": [
            720,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            5,
            5
          ],
          "spanList": [
            720,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            5,
            1
          ],
          "spanList": [
            720,
            17,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            5,
            3
          ],
          "spanList": [
            720,
            32,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            6
          ],
          "spanList": [
            721,
            2,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            6,
            4
          ],
          "spanList": [
            721,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            6,
            5
          ],
          "spanList": [
            721,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            6,
            1
          ],
          "spanList": [
            721,
            18,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            18,
            2,
            6,
            3
          ],
          "spanList": [
            721,
            36,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19
          ],
          "spanList": [
            729,
            0,
            858,
            1
          ],
          "leadingComments": " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n",
          "leadingDetachedCommentsList": [
            " ===================================================================\n Optional source code info\n"
          ]
        },
        {
          "pathList": [
            4,
            19,
            1
          ],
          "spanList": [
            729,
            8,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            2,
            0
          ],
          "spanList": [
            773,
            2,
            33
          ],
          "leadingComments": " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendant.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            2,
            0,
            4
          ],
          "spanList": [
            773,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            2,
            0,
            6
          ],
          "spanList": [
            773,
            11,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            2,
            0,
            1
          ],
          "spanList": [
            773,
            20,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            2,
            0,
            3
          ],
          "spanList": [
            773,
            31,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0
          ],
          "spanList": [
            774,
            2,
            857,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            1
          ],
          "spanList": [
            774,
            10,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0
          ],
          "spanList": [
            798,
            4,
            44
          ],
          "leadingComments": " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            798,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            798,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            798,
            19,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            798,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0,
            8
          ],
          "spanList": [
            798,
            28,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            0,
            8,
            2
          ],
          "spanList": [
            798,
            29,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1
          ],
          "spanList": [
            805,
            4,
            44
          ],
          "leadingComments": " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            805,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            805,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            805,
            19,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            805,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1,
            8
          ],
          "spanList": [
            805,
            28,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            1,
            8,
            2
          ],
          "spanList": [
            805,
            29,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            2
          ],
          "spanList": [
            854,
            4,
            41
          ],
          "leadingComments": " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n\n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n\n leading_detached_comments will keep paragraphs of comments that appear\n before (but not connected to) the current element. Each paragraph,\n separated by empty lines, will be one comment element in the repeated\n field.\n\n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n\n Examples:\n\n   optional int32 foo = 1;  // Comment attached to foo.\n   // Comment attached to bar.\n   optional int32 bar = 2;\n\n   optional string baz = 3;\n   // Comment attached to baz.\n   // Another line attached to baz.\n\n   // Comment attached to qux.\n   //\n   // Another line attached to qux.\n   optional double qux = 4;\n\n   // Detached comment for corge. This is not leading or trailing comments\n   // to qux or corge because there are blank lines separating it from\n   // both.\n\n   // Detached comment for corge paragraph 2.\n\n   optional string corge = 5;\n   /* Block comment attached\n    * to corge.  Leading asterisks\n    * will be removed. */\n   /* Block comment attached to\n    * grault. */\n   optional int32 grault = 6;\n\n   // ignored detached comments.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            854,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            2,
            5
          ],
          "spanList": [
            854,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            854,
            20,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            854,
            39,
            40
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            3
          ],
          "spanList": [
            855,
            4,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            3,
            4
          ],
          "spanList": [
            855,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            3,
            5
          ],
          "spanList": [
            855,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            855,
            20,
            37
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            3,
            3
          ],
          "spanList": [
            855,
            40,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            4
          ],
          "spanList": [
            856,
            4,
            50
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            4,
            4
          ],
          "spanList": [
            856,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            4,
            5
          ],
          "spanList": [
            856,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            4,
            1
          ],
          "spanList": [
            856,
            20,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            19,
            3,
            0,
            2,
            4,
            3
          ],
          "spanList": [
            856,
            48,
            49
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20
          ],
          "spanList": [
            863,
            0,
            884,
            1
          ],
          "leadingComments": " Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            1
          ],
          "spanList": [
            863,
            8,
            25
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            2,
            0
          ],
          "spanList": [
            866,
            2,
            37
          ],
          "leadingComments": " An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            2,
            0,
            4
          ],
          "spanList": [
            866,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            2,
            0,
            6
          ],
          "spanList": [
            866,
            11,
            21
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            2,
            0,
            1
          ],
          "spanList": [
            866,
            22,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            2,
            0,
            3
          ],
          "spanList": [
            866,
            35,
            36
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0
          ],
          "spanList": [
            867,
            2,
            883,
            3
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            1
          ],
          "spanList": [
            867,
            10,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0
          ],
          "spanList": [
            870,
            4,
            44
          ],
          "leadingComments": " Identifies the element in the original source .proto file. This field\n is formatted the same as SourceCodeInfo.Location.path.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            870,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            870,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            870,
            19,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            870,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0,
            8
          ],
          "spanList": [
            870,
            28,
            43
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            0,
            8,
            2
          ],
          "spanList": [
            870,
            29,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            1
          ],
          "spanList": [
            873,
            4,
            36
          ],
          "leadingComments": " Identifies the filesystem path to the original source .proto.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            873,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            873,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            873,
            20,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            873,
            34,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            2
          ],
          "spanList": [
            877,
            4,
            29
          ],
          "leadingComments": " Identifies the starting offset in bytes in the generated code\n that relates to the identified object.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            877,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            2,
            5
          ],
          "spanList": [
            877,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            877,
            19,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            877,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            3
          ],
          "spanList": [
            882,
            4,
            27
          ],
          "leadingComments": " Identifies the ending offset in bytes in the generated code that\n relates to the identified offset. The end offset should be one past\n the last relevant byte (so the length of the text = end - begin).\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            3,
            4
          ],
          "spanList": [
            882,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            3,
            5
          ],
          "spanList": [
            882,
            13,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            882,
            19,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            20,
            3,
            0,
            2,
            3,
            3
          ],
          "spanList": [
            882,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    }
  },
  {
    "name": "google/protobuf/compiler/plugin.proto",
    "pb_package": "google.protobuf.compiler",
    "dependencyList": [
      "google/protobuf/descriptor.proto"
    ],
    "publicDependencyList": [],
    "weakDependencyList": [],
    "messageTypeList": [
      {
        "name": "Version",
        "fieldList": [
          {
            "name": "major",
            "number": 1,
            "label": 1,
            "type": 5,
            "jsonName": "major"
          },
          {
            "name": "minor",
            "number": 2,
            "label": 1,
            "type": 5,
            "jsonName": "minor"
          },
          {
            "name": "patch",
            "number": 3,
            "label": 1,
            "type": 5,
            "jsonName": "patch"
          },
          {
            "name": "suffix",
            "number": 4,
            "label": 1,
            "type": 9,
            "jsonName": "suffix"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "CodeGeneratorRequest",
        "fieldList": [
          {
            "name": "file_to_generate",
            "number": 1,
            "label": 3,
            "type": 9,
            "jsonName": "fileToGenerate"
          },
          {
            "name": "parameter",
            "number": 2,
            "label": 1,
            "type": 9,
            "jsonName": "parameter"
          },
          {
            "name": "proto_file",
            "number": 15,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.FileDescriptorProto",
            "jsonName": "protoFile"
          },
          {
            "name": "compiler_version",
            "number": 3,
            "label": 1,
            "type": 11,
            "typeName": ".google.protobuf.compiler.Version",
            "jsonName": "compilerVersion"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      },
      {
        "name": "CodeGeneratorResponse",
        "fieldList": [
          {
            "name": "error",
            "number": 1,
            "label": 1,
            "type": 9,
            "jsonName": "error"
          },
          {
            "name": "file",
            "number": 15,
            "label": 3,
            "type": 11,
            "typeName": ".google.protobuf.compiler.CodeGeneratorResponse.File",
            "jsonName": "file"
          }
        ],
        "extensionList": [],
        "nestedTypeList": [
          {
            "name": "File",
            "fieldList": [
              {
                "name": "name",
                "number": 1,
                "label": 1,
                "type": 9,
                "jsonName": "name"
              },
              {
                "name": "insertion_point",
                "number": 2,
                "label": 1,
                "type": 9,
                "jsonName": "insertionPoint"
              },
              {
                "name": "content",
                "number": 15,
                "label": 1,
                "type": 9,
                "jsonName": "content"
              }
            ],
            "extensionList": [],
            "nestedTypeList": [],
            "enumTypeList": [],
            "extensionRangeList": [],
            "oneofDeclList": [],
            "reservedRangeList": [],
            "reservedNameList": []
          }
        ],
        "enumTypeList": [],
        "extensionRangeList": [],
        "oneofDeclList": [],
        "reservedRangeList": [],
        "reservedNameList": []
      }
    ],
    "enumTypeList": [],
    "serviceList": [],
    "extensionList": [],
    "options": {
      "javaPackage": "com.google.protobuf.compiler",
      "javaOuterClassname": "PluginProtos",
      "javaMultipleFiles": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/golang/protobuf/protoc-gen-go/plugin;plugin_go",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": false,
      "uninterpretedOptionList": []
    },
    "sourceCodeInfo": {
      "locationList": [
        {
          "pathList": [],
          "spanList": [
            46,
            0,
            167,
            1
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            12
          ],
          "spanList": [
            46,
            0,
            18
          ],
          "leadingDetachedCommentsList": [
            " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
            " Author: kenton@google.com (Kenton Varda)\n\n WARNING:  The plugin interface is currently EXPERIMENTAL and is subject to\n   change.\n\n protoc (aka the Protocol Compiler) can be extended via plugins.  A plugin is\n just a program that reads a CodeGeneratorRequest from stdin and writes a\n CodeGeneratorResponse to stdout.\n\n Plugins written using C++ can use google/protobuf/compiler/plugin.h instead\n of dealing with the raw protocol defined here.\n\n A plugin executable needs only to be placed somewhere in the path.  The\n plugin should be named \"protoc-gen-$NAME\", and will then be used when the\n flag \"--${NAME}_out\" is passed to protoc.\n"
          ]
        },
        {
          "pathList": [
            2
          ],
          "spanList": [
            48,
            0,
            33
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            49,
            0,
            53
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            1
          ],
          "spanList": [
            49,
            0,
            53
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            50,
            0,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            8
          ],
          "spanList": [
            50,
            0,
            45
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8
          ],
          "spanList": [
            52,
            0,
            80
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            8,
            11
          ],
          "spanList": [
            52,
            0,
            80
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            3,
            0
          ],
          "spanList": [
            54,
            0,
            42
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0
          ],
          "spanList": [
            57,
            0,
            64,
            1
          ],
          "leadingComments": " The version number of protocol compiler.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            1
          ],
          "spanList": [
            57,
            8,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0
          ],
          "spanList": [
            58,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            58,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            58,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            58,
            17,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            58,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1
          ],
          "spanList": [
            59,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            59,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            59,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            59,
            17,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            59,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2
          ],
          "spanList": [
            60,
            2,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            60,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            5
          ],
          "spanList": [
            60,
            11,
            16
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            60,
            17,
            22
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            60,
            25,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3
          ],
          "spanList": [
            63,
            2,
            29
          ],
          "leadingComments": " A suffix for alpha, beta or rc release, e.g., \"alpha-1\", \"rc2\". It should\n be empty for mainline stable releases.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            4
          ],
          "spanList": [
            63,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            5
          ],
          "spanList": [
            63,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            1
          ],
          "spanList": [
            63,
            18,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            0,
            2,
            3,
            3
          ],
          "spanList": [
            63,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1
          ],
          "spanList": [
            67,
            0,
            95,
            1
          ],
          "leadingComments": " An encoded CodeGeneratorRequest is written to the plugin's stdin.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            1
          ],
          "spanList": [
            67,
            8,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0
          ],
          "spanList": [
            71,
            2,
            39
          ],
          "leadingComments": " The .proto files that were explicitly listed on the command-line.  The\n code generator should generate code only for these files.  Each file's\n descriptor will be included in proto_file, below.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            4
          ],
          "spanList": [
            71,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            5
          ],
          "spanList": [
            71,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            1
          ],
          "spanList": [
            71,
            18,
            34
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            0,
            3
          ],
          "spanList": [
            71,
            37,
            38
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1
          ],
          "spanList": [
            74,
            2,
            32
          ],
          "leadingComments": " The generator parameter passed on the command-line.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            4
          ],
          "spanList": [
            74,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            5
          ],
          "spanList": [
            74,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            1
          ],
          "spanList": [
            74,
            18,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            1,
            3
          ],
          "spanList": [
            74,
            30,
            31
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2
          ],
          "spanList": [
            90,
            2,
            47
          ],
          "leadingComments": " FileDescriptorProtos for all files in files_to_generate and everything\n they import.  The files will appear in topological order, so each file\n appears before any file that imports it.\n\n protoc guarantees that all proto_files will be written after\n the fields above, even though this is not technically guaranteed by the\n protobuf wire format.  This theoretically could allow a plugin to stream\n in the FileDescriptorProtos and handle them one by one rather than read\n the entire set into memory at once.  However, as of this writing, this\n is not similarly optimized on protoc's end -- it will store all fields in\n memory at once before sending them to the plugin.\n\n Type names of fields and extensions in the FileDescriptorProto are always\n fully qualified.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            4
          ],
          "spanList": [
            90,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            6
          ],
          "spanList": [
            90,
            11,
            30
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            1
          ],
          "spanList": [
            90,
            31,
            41
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            2,
            3
          ],
          "spanList": [
            90,
            44,
            46
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3
          ],
          "spanList": [
            93,
            2,
            40
          ],
          "leadingComments": " The version number of protocol compiler.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            4
          ],
          "spanList": [
            93,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            6
          ],
          "spanList": [
            93,
            11,
            18
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            1
          ],
          "spanList": [
            93,
            19,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            1,
            2,
            3,
            3
          ],
          "spanList": [
            93,
            38,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2
          ],
          "spanList": [
            98,
            0,
            167,
            1
          ],
          "leadingComments": " The plugin writes an encoded CodeGeneratorResponse to stdout.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            1
          ],
          "spanList": [
            98,
            8,
            29
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0
          ],
          "spanList": [
            107,
            2,
            28
          ],
          "leadingComments": " Error message.  If non-empty, code generation failed.  The plugin process\n should exit with status code zero even if it reports an error in this way.\n\n This should be used to indicate errors in .proto files which prevent the\n code generator from generating correct code.  Errors which indicate a\n problem in protoc itself -- such as the input CodeGeneratorRequest being\n unparseable -- should be reported by writing a message to stderr and\n exiting with a non-zero status code.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            4
          ],
          "spanList": [
            107,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            5
          ],
          "spanList": [
            107,
            11,
            17
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            1
          ],
          "spanList": [
            107,
            18,
            23
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            0,
            3
          ],
          "spanList": [
            107,
            26,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0
          ],
          "spanList": [
            110,
            2,
            165,
            3
          ],
          "leadingComments": " Represents a single generated file.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            1
          ],
          "spanList": [
            110,
            10,
            14
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0
          ],
          "spanList": [
            122,
            4,
            29
          ],
          "leadingComments": " The file name, relative to the output directory.  The name must not\n contain \".\" or \"..\" components and must be relative, not be absolute (so,\n the file cannot lie outside the output directory).  \"/\" must be used as\n the path separator, not \"\\\".\n\n If the name is omitted, the content will be appended to the previous\n file.  This allows the generator to break large files into small chunks,\n and allows the generated text to be streamed back to protoc so that large\n files need not reside completely in memory at one time.  Note that as of\n this writing protoc does not optimize for this -- it will read the entire\n CodeGeneratorResponse before writing files to disk.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            4
          ],
          "spanList": [
            122,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            5
          ],
          "spanList": [
            122,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            1
          ],
          "spanList": [
            122,
            20,
            24
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            0,
            3
          ],
          "spanList": [
            122,
            27,
            28
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1
          ],
          "spanList": [
            161,
            4,
            40
          ],
          "leadingComments": " If non-empty, indicates that the named file should already exist, and the\n content here is to be inserted into that file at a defined insertion\n point.  This feature allows a code generator to extend the output\n produced by another code generator.  The original generator may provide\n insertion points by placing special annotations in the file that look\n like:\n   @@protoc_insertion_point(NAME)\n The annotation can have arbitrary text before and after it on the line,\n which allows it to be placed in a comment.  NAME should be replaced with\n an identifier naming the point -- this is what other generators will use\n as the insertion_point.  Code inserted at this point will be placed\n immediately above the line containing the insertion point (thus multiple\n insertions to the same point will come out in the order they were added).\n The double-@ is intended to make it unlikely that the generated code\n could contain things that look like insertion points by accident.\n\n For example, the C++ code generator places the following line in the\n .pb.h files that it generates:\n   // @@protoc_insertion_point(namespace_scope)\n This line appears within the scope of the file's package namespace, but\n outside of any particular class.  Another plugin can then specify the\n insertion_point \"namespace_scope\" to generate additional classes or\n other declarations that should be placed in this scope.\n\n Note that if the line containing the insertion point begins with\n whitespace, the same whitespace will be added to every line of the\n inserted text.  This is useful for languages like Python, where\n indentation matters.  In these languages, the insertion point comment\n should be indented the same amount as any inserted code will need to be\n in order to work correctly in that context.\n\n The code generator that generates the initial file and the one which\n inserts into it must both run as part of a single invocation of protoc.\n Code generators are executed in the order in which they appear on the\n command line.\n\n If |insertion_point| is present, |name| must also be present.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            4
          ],
          "spanList": [
            161,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            5
          ],
          "spanList": [
            161,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            1
          ],
          "spanList": [
            161,
            20,
            35
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            1,
            3
          ],
          "spanList": [
            161,
            38,
            39
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2
          ],
          "spanList": [
            164,
            4,
            33
          ],
          "leadingComments": " The file contents.\n",
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            4
          ],
          "spanList": [
            164,
            4,
            12
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            5
          ],
          "spanList": [
            164,
            13,
            19
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            1
          ],
          "spanList": [
            164,
            20,
            27
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            3,
            0,
            2,
            2,
            3
          ],
          "spanList": [
            164,
            30,
            32
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1
          ],
          "spanList": [
            166,
            2,
            26
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            4
          ],
          "spanList": [
            166,
            2,
            10
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            6
          ],
          "spanList": [
            166,
            11,
            15
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            1
          ],
          "spanList": [
            166,
            16,
            20
          ],
          "leadingDetachedCommentsList": []
        },
        {
          "pathList": [
            4,
            2,
            2,
            1,
            3
          ],
          "spanList": [
            166,
            23,
            25
          ],
          "leadingDetachedCommentsList": []
        }
      ]
    }
  }
]